{
	"info": {
		"_postman_id": "44d9c775-ac73-4d6e-b4c0-ecf950de062c",
		"name": "Assurdly | Participant APIs",
		"description": "List of API used for managing Participants",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42813033"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Login - Valid Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json() // Compulsory for all test",
											"pm.collectionVariables.set(\"access_token\", response.access_token); // Compulsory for all valid login tests",
											"pm.collectionVariables.set(\"refresh_token\", response.refresh_token); // Compulsory for all  Valid login tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains all required fields\", () => {",
											"    pm.expect(response).to.be.an(\"object\");",
											"    pm.expect(response).to.have.all.keys(",
											"        \"access_token\",",
											"        \"expires_in\",",
											"        \"refresh_expires_in\",",
											"        \"refresh_token\",",
											"        \"token_type\",",
											"        \"not-before-policy\",",
											"        \"session_state\",",
											"        \"scope\"",
											"    );",
											"});",
											"",
											"pm.test(\"Authentication tokens exists\", () => {",
											"    pm.expect(response.access_token).to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(response.refresh_token).to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Token type is Bearer\", () => {",
											"    pm.expect(response.token_type).to.eql(\"Bearer\");",
											"});",
											"",
											"pm.test(\"Scope contains expected values\", () => {",
											"    pm.expect(response.scope).to.include(\"email\");",
											"    pm.expect(response.scope).to.include(\"profile\");",
											"    pm.expect(response.scope).to.include(\"org-role\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('baseUrl', 'https://demo.dfqt.org') // Should be on all. valid login"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "gain-reporting",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "assurdly-participant-mgmt",
											"type": "text"
										},
										{
											"key": "password",
											"value": "i4yJuN2dBshGKo6jak2E",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/iam/realms/gain/protocol/openid-connect/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"iam",
										"realms",
										"gain",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Invalid Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const req = pm.request.body",
											"const reqUrl = pm.request.url.path",
											"pm.collectionVariables.set(\"reqUrl\", reqUrl);",
											"const response = pm.response.json()",
											"const { error_description, error } = pm.response.json()",
											"",
											"",
											"pm.test(\"Test for valid error description\", () => {",
											"    pm.expect(error_description).to.eql(\"Invalid user credentials\")",
											"})",
											"",
											"pm.test(\"Test for valid error type\", () => {",
											"    pm.expect(error).to.eql(\"invalid_grant\")",
											"})",
											"pm.test(\"Status code is 401 \", () => {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"No access token in error response\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.not.have.property(\"access_token\");",
											"    pm.expect(response).to.not.have.property(\"refresh_token\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "gain-reporting",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "-user-mgmt",
											"type": "text"
										},
										{
											"key": "password",
											"value": "BMA",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/iam/realms/gain/protocol/openid-connect/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"iam",
										"realms",
										"gain",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Invalid Credentials - Missing Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const req = pm.request.body",
											"const reqUrl = pm.request.url.path",
											"pm.collectionVariables.set(\"reqUrl\", reqUrl);",
											"",
											"const response = pm.response.json();",
											"",
											"",
											"// Test for missing password",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response contains 'unknown_error'\", function () {",
											"   ",
											"    pm.expect(response).to.have.property(\"error\", \"unknown_error\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "gain-reporting",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "assurdly-user-mgmt",
											"type": "text"
										},
										{
											"key": "password",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/iam/realms/gain/protocol/openid-connect/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"iam",
										"realms",
										"gain",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Invalid Credentials - Missing Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const req = pm.request.body",
											"const reqUrl = pm.request.url.path",
											"pm.collectionVariables.set(\"reqUrl\", reqUrl);",
											"",
											"const response = pm.response.json();",
											"const { error_description, error } = pm.response.json()",
											"",
											"// Test for missing email",
											"pm.test(\"Test for valid error description\", () => {",
											"    pm.expect(error_description).to.eql(\"Invalid user credentials\")",
											"})",
											"",
											"pm.test(\"Test for valid error type\", () => {",
											"    pm.expect(error).to.eql(\"invalid_grant\")",
											"})",
											"pm.test(\"Status code is 401 \", () => {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"No access token in error response\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.not.have.property(\"access_token\");",
											"    pm.expect(response).to.not.have.property(\"refresh_token\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "gain-reporting",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "",
											"type": "text"
										},
										{
											"key": "password",
											"value": "gULiHw659LN7VUJ",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/iam/realms/gain/protocol/openid-connect/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"iam",
										"realms",
										"gain",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "List Participants",
			"item": [
				{
					"name": "Participants List - Valid Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"const rawId = response.data[0].participant_id;",
									"",
									"if (rawId && rawId.includes(\":\")) {",
									"    const [participantType, participantId] = rawId.split(\":\");",
									"    pm.collectionVariables.set(\"participant_id\", participantId);",
									"    pm.collectionVariables.set(\"participant_type\", participantType);",
									"} else {",
									"    console.warn(\"Invalid participant_id format:\", rawId);",
									"}",
									"",
									"pm.test(\"Response status is 200 OK\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains success: true\", () => {",
									"    pm.expect(response.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains an array of participants in data\", () => {",
									"    pm.expect(response.data).to.be.an(\"array\");",
									"    pm.expect(response.data.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Each participant object contains required fields\", () => {",
									"    response.data.forEach(participant => {",
									"        pm.expect(participant).to.have.property(\"name\").that.is.a(\"string\");",
									"        pm.expect(participant).to.have.property(\"participant_id\").that.is.a(\"string\");",
									"        pm.expect(participant).to.have.property(\"type\").that.is.a(\"string\");",
									"        pm.expect(participant).to.have.property(\"participantType\").that.is.a(\"string\");",
									"        pm.expect(participant).to.have.property(\"contact\").that.is.a(\"string\");",
									"        pm.expect(participant).to.have.property(\"website\").that.is.a(\"string\");",
									"    });",
									"});",
									"",
									"pm.test(\"All participant types are valid\", () => {",
									"    const validTypes = [\"prod\", \"prem-prod\", \"govt\"];",
									"    response.data.forEach(participant => {",
									"        pm.expect(validTypes).to.include(participant.type);",
									"    });",
									"});",
									"",
									"pm.test(\"All participantType values are valid\", () => {",
									"    const validParticipantTypes = [\"Micronutrient\", \"Oil Producer\", \"Govt. Agency\"];",
									"    response.data.forEach(participant => {",
									"        pm.expect(validParticipantTypes).to.include(participant.participantType);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/get-participant_list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"get-participant_list"
							]
						},
						"description": "Lists all the participants created with the system"
					},
					"response": [
						{
							"name": "Participants list",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/participant/get-participant_list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"get-participant_list"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"data\": [\n    {\n      \"name\": \"<string>\",\n      \"participant_id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"participantType\": \"<string>\",\n      \"contact\": \"<string>\",\n      \"website\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"participant_id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"participantType\": \"<string>\",\n      \"contact\": \"<string>\",\n      \"website\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Participants List - No Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/get-participant_list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"get-participant_list"
							]
						},
						"description": "Lists all the participants created with the system"
					},
					"response": [
						{
							"name": "Participants list",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/participant/get-participant_list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"get-participant_list"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"data\": [\n    {\n      \"name\": \"<string>\",\n      \"participant_id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"participantType\": \"<string>\",\n      \"contact\": \"<string>\",\n      \"website\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"participant_id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"participantType\": \"<string>\",\n      \"contact\": \"<string>\",\n      \"website\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Get a Participant",
			"item": [
				{
					"name": "Participants Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response is successful\", function () {",
									"    pm.expect(response.success).to.eql(true);",
									"    pm.expect(response.data).to.be.an(\"array\").that.is.not.empty;",
									"});",
									"",
									"const participant = response.data[0];",
									"pm.test(\"Participant has valid participant_id\", function () {",
									"    pm.expect(participant).to.have.property(\"participant_id\");",
									"    pm.expect(participant.participant_id).to.include(\":\");",
									"});",
									"",
									"const [participantType, participantId] = participant.participant_id.split(\":\");",
									"pm.collectionVariables.set(\"participant_id\", participantId);",
									"pm.collectionVariables.set(\"participant_type\", participantType);",
									"",
									"console.log(\"participant_type:\", participantType);",
									"console.log(\"participant_id:\", participantId);",
									"",
									"// Test sites structure",
									"pm.test(\"Each site has valid location\", function () {",
									"    participant.sites.forEach(site => {",
									"        pm.expect(site.location).to.have.property(\"id\");",
									"        pm.expect(site.location).to.have.property(\"type\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"participant_id\": \"{{participant_id}}\",\n  \"participant_type\": \"{{participant_type}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/get-participant_details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"get-participant_details"
							]
						},
						"description": "Get the detail of Participant"
					},
					"response": [
						{
							"name": "Participant detail",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"participant_id\": \"<string>\",\n  \"participant_type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/get-participant_details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"get-participant_details"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"data\": [\n    {\n      \"company_name\": \"<string>\",\n      \"participant_id\": \"<string>\",\n      \"company_type\": \"<string>\",\n      \"participantType\": \"<string>\",\n      \"contact\": \"<string>\",\n      \"website\": \"<string>\",\n      \"phonenumber\": \"<string>\",\n      \"sites\": [\n        {\n          \"_id\": \"<string>\",\n          \"site_name\": \"<string>\",\n          \"site_address\": \"<string>\",\n          \"site_city\": \"<string>\",\n          \"site_country\": \"<string>\",\n          \"site_state\": \"<string>\",\n          \"site_zipcode\": \"<string>\",\n          \"location\": {\n            \"id\": \"<string>\",\n            \"type\": \"<string>\"\n          },\n          \"coordinates\": {\n            \"latitude\": \"<number>\",\n            \"longitude\": \"<number>\"\n          }\n        },\n        {\n          \"_id\": \"<string>\",\n          \"site_name\": \"<string>\",\n          \"site_address\": \"<string>\",\n          \"site_city\": \"<string>\",\n          \"site_country\": \"<string>\",\n          \"site_state\": \"<string>\",\n          \"site_zipcode\": \"<string>\",\n          \"location\": {\n            \"id\": \"<string>\",\n            \"type\": \"<string>\"\n          },\n          \"coordinates\": {\n            \"latitude\": \"<number>\",\n            \"longitude\": \"<number>\"\n          }\n        }\n      ]\n    },\n    {\n      \"company_name\": \"<string>\",\n      \"participant_id\": \"<string>\",\n      \"company_type\": \"<string>\",\n      \"participantType\": \"<string>\",\n      \"contact\": \"<string>\",\n      \"website\": \"<string>\",\n      \"phonenumber\": \"<string>\",\n      \"sites\": [\n        {\n          \"_id\": \"<string>\",\n          \"site_name\": \"<string>\",\n          \"site_address\": \"<string>\",\n          \"site_city\": \"<string>\",\n          \"site_country\": \"<string>\",\n          \"site_state\": \"<string>\",\n          \"site_zipcode\": \"<string>\",\n          \"location\": {\n            \"id\": \"<string>\",\n            \"type\": \"<string>\"\n          },\n          \"coordinates\": {\n            \"latitude\": \"<number>\",\n            \"longitude\": \"<number>\"\n          }\n        },\n        {\n          \"_id\": \"<string>\",\n          \"site_name\": \"<string>\",\n          \"site_address\": \"<string>\",\n          \"site_city\": \"<string>\",\n          \"site_country\": \"<string>\",\n          \"site_state\": \"<string>\",\n          \"site_zipcode\": \"<string>\",\n          \"location\": {\n            \"id\": \"<string>\",\n            \"type\": \"<string>\"\n          },\n          \"coordinates\": {\n            \"latitude\": \"<number>\",\n            \"longitude\": \"<number>\"\n          }\n        }\n      ]\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Participants Detail - No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"participant_id\": \"{{participant_id}}\",\n  \"participant_type\": \"{{participant_type}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/get-participant_details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"get-participant_details"
							]
						},
						"description": "Get the detail of Participant"
					},
					"response": [
						{
							"name": "Participant detail",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"participant_id\": \"<string>\",\n  \"participant_type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/get-participant_details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"get-participant_details"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"data\": [\n    {\n      \"company_name\": \"<string>\",\n      \"participant_id\": \"<string>\",\n      \"company_type\": \"<string>\",\n      \"participantType\": \"<string>\",\n      \"contact\": \"<string>\",\n      \"website\": \"<string>\",\n      \"phonenumber\": \"<string>\",\n      \"sites\": [\n        {\n          \"_id\": \"<string>\",\n          \"site_name\": \"<string>\",\n          \"site_address\": \"<string>\",\n          \"site_city\": \"<string>\",\n          \"site_country\": \"<string>\",\n          \"site_state\": \"<string>\",\n          \"site_zipcode\": \"<string>\",\n          \"location\": {\n            \"id\": \"<string>\",\n            \"type\": \"<string>\"\n          },\n          \"coordinates\": {\n            \"latitude\": \"<number>\",\n            \"longitude\": \"<number>\"\n          }\n        },\n        {\n          \"_id\": \"<string>\",\n          \"site_name\": \"<string>\",\n          \"site_address\": \"<string>\",\n          \"site_city\": \"<string>\",\n          \"site_country\": \"<string>\",\n          \"site_state\": \"<string>\",\n          \"site_zipcode\": \"<string>\",\n          \"location\": {\n            \"id\": \"<string>\",\n            \"type\": \"<string>\"\n          },\n          \"coordinates\": {\n            \"latitude\": \"<number>\",\n            \"longitude\": \"<number>\"\n          }\n        }\n      ]\n    },\n    {\n      \"company_name\": \"<string>\",\n      \"participant_id\": \"<string>\",\n      \"company_type\": \"<string>\",\n      \"participantType\": \"<string>\",\n      \"contact\": \"<string>\",\n      \"website\": \"<string>\",\n      \"phonenumber\": \"<string>\",\n      \"sites\": [\n        {\n          \"_id\": \"<string>\",\n          \"site_name\": \"<string>\",\n          \"site_address\": \"<string>\",\n          \"site_city\": \"<string>\",\n          \"site_country\": \"<string>\",\n          \"site_state\": \"<string>\",\n          \"site_zipcode\": \"<string>\",\n          \"location\": {\n            \"id\": \"<string>\",\n            \"type\": \"<string>\"\n          },\n          \"coordinates\": {\n            \"latitude\": \"<number>\",\n            \"longitude\": \"<number>\"\n          }\n        },\n        {\n          \"_id\": \"<string>\",\n          \"site_name\": \"<string>\",\n          \"site_address\": \"<string>\",\n          \"site_city\": \"<string>\",\n          \"site_country\": \"<string>\",\n          \"site_state\": \"<string>\",\n          \"site_zipcode\": \"<string>\",\n          \"location\": {\n            \"id\": \"<string>\",\n            \"type\": \"<string>\"\n          },\n          \"coordinates\": {\n            \"latitude\": \"<number>\",\n            \"longitude\": \"<number>\"\n          }\n        }\n      ]\n    }\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Update Participant",
			"item": [
				{
					"name": "Update Participants Detail - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response status is 200 OK\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success as true\", () => {",
									"    pm.expect(response.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response has data as an array\", () => {",
									"    pm.expect(response.data).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Response has details with message and detail\", () => {",
									"    pm.expect(response).to.have.property(\"details\");",
									"    pm.expect(response.details).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(response.details).to.have.property(\"detail\").that.is.a(\"string\");",
									"});",
									"",
									"pm.test(\"Message confirms successful update\", () => {",
									"    pm.expect(response.details.message).to.eql(\"Participant details updated successfully\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en,en-US;q=0.9"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJDVlZXbDZDcF9TcE44LXJaZFl3OXdZQlB0SW1VdTBmM0Nmd3gtMklQMUF3In0.eyJleHAiOjE3NDY3MDYzNDIsImlhdCI6MTc0NjcwNjA0MiwiYXV0aF90aW1lIjoxNzQ2NzAwNjAxLCJqdGkiOiIwNThlZDY1OS0wZDlkLTRiYmYtOWEyNy01YzU0MTMyNTdiYjgiLCJpc3MiOiJodHRwczovL2RlbW8uZGZxdC5vcmcvaWFtL3JlYWxtcy9nYWluIiwiYXVkIjpbImlzdGlvLWdhdGV3YXktdGxzLWNsaWVudCIsInJlYWxtLW1hbmFnZW1lbnQiLCJicm9rZXIiLCJhY2NvdW50Il0sInN1YiI6IjFlMTUyNDRlLTkwMGMtNDU0ZS04MTEwLWY1YzE4NDA3YjAxOCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImdhaW4tdXNlci1tYW5hZ2VtZW50Iiwibm9uY2UiOiIzNGFhMzNhYy00YWFkLTQ0NDMtOGNlZi1jYzExYTU3OTUyMTMiLCJzZXNzaW9uX3N0YXRlIjoiOTkzZTYxNjItM2MyNi00MjRkLThhNGMtN2VkNTBiMGQ4ZmI0IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2RlbW8uZGZxdC5vcmciXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJwYXJ0aWNpcGFudC1tYW5hZ2VyIiwiZGVmYXVsdC1yb2xlcy1nYWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsicmVhbG0tbWFuYWdlbWVudCI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsInJlYWxtLWFkbWluIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJicm9rZXIiOnsicm9sZXMiOlsicmVhZC10b2tlbiJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctYXBwbGljYXRpb25zIiwidmlldy1jb25zZW50Iiwidmlldy1ncm91cHMiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsIm1hbmFnZS1jb25zZW50IiwiZGVsZXRlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBvcmctcm9sZSBpc3Rpby1nYXRld2F5LXRscy1jbGllbnQtYXVkaWVuY2UgcHJvZmlsZSIsInNpZCI6Ijk5M2U2MTYyLTNjMjYtNDI0ZC04YTRjLTdlZDUwYjBkOGZiNCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IkFzc3VyZGx5IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXNzdXJkbHktcGFydGljaXBhbnQtbWdtdCIsImdpdmVuX25hbWUiOiJBc3N1cmRseSIsImZhbWlseV9uYW1lIjoiIiwiZW1haWwiOiJhc3N1cmRseS1wYXJ0aWNpcGFudC1tZ210QGV4YW1wbGUuY29tIn0.ma3m3aUzkYG4eDoyrgf8LM6pi8kBd-T5rrEzX7rDUlCPifC_EE8bcFBrjf3a2hi2Pb5tI4IJRC3AoGidw3mAmFvuwLaijH9ER_2qjdJ2kQb8dcFLobw8nIUeWBCtdO5Axl7OSDoNNks9Xc2T6NhSxzKyV7N9-fhef47kjf3AsxYrMaVbExWLHSjDxvZ7MWKSR6jKcckPuAcS8eFZ1XIiF6JkyNqBtTpxnybFcEaoZJgOme3uMJPBPbAUUgDFtox2YDqryHoR8o65BnV-Fn1DVV3BUak9lNNsWQJVv_0-97BLRrt7Ld0aWfWGM79t4fth1fQuG2Pd1bk6JHDFwc2g5Q"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "origin",
								"value": "https://demo.dfqt.org"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://demo.dfqt.org/user/participant/edit/R0xOOjQwNDE4NjUwMDAwMjE=/master"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36"
							},
							{
								"key": "Cookie",
								"value": "_oauth2_proxy_0=qNZ5zbmxxyi8YPLXIC7YFIryS_uJJTBq6n9HNw2V2ou5F4BDcsHiEgz9FMUGHfgbA4fNng1Vx3lnlaznjDggNTHFLSSIoruomYNPDHUKrsNAanSa01dSk2kq4tNbAh91hg97j3L0ctXrG-fsjzNZMwzj5rphyCDWDFbnXO1QzZDki6lvA3lYeSpRO6__Tb04DONyANsSRTfHyWuvxrSYhd0yLaU-hogDCEW9MEfvmDestCYlrj3f0m-lGesDo1G-p2MrBUsQrqDCYz5-2YQYwn14WEMOKNpMQIrr6Af7YlkRuAjcTv4vEuUVD9U1PSVQUQDaGJ7gEZcqKnRHLFQF9WBaVrZRf_sqkrrK6NkfVpdOZ7pW2ZXMk2um4_lBf2rVJXawP9zWzb64-LJsYhJXJbGLvju9C5l1QlAI1ovxQsjmKcipKhCx9xxQII_bKdYF9jalhEdLEnLtHDYHw_gJD8KLVnV6IaWWPon9GGUvbwFJ5boCSXTjoGlIQkL5j70t9WE0sgJNCr7oeIfFTS2VxmGdbjoPeAP7bZqR85kmEHApIVCZtTy0xKJ5ECZLmipQev6Qe33eCJOby9xqOjFvDUb1kiVtfnj0hXS2FnYbCDKTbDnLZJv3m537sFH3oTvXZ2h8XCaimC8nCRmJT39CkUXoG7DeY96LzGsqm98oy0FgEyI8tmfdhvj5g1P4s6PQk28c8lqBsVPV-Pw-h0Z7KdvqvNxII6M1tRO0JXJn8oK_lUQYcV7WMVvyhPE6JZHI0xC3xnISgAwYPYMoQjTMA_AKj5aN4YYj976IuZ_84euouiSMZ9oyIdLcHXgRhtU7r0y2cMJ8CS62NNeI2AStVwfTY6CgD1gQCIFKwDsU2mPanvGdn6Y4skD6IERCp5wI1aW8btjEii_-pu00LnzPmasxnpTBh5GnVikd3Rk3gNYleydfP8YhZFk64WZ3mnBaA6fgJIWgWaFNWLHqVIYIop3NphiDXmqD6flHsJKBEU-N-IPggJe9UN_kO2a7xs-Q8FAEl8P4gfaQ6CJwNfyxzTK1JdHVLSnkTojguSywg21FZ-o2-QiD_cpPZCIVa2xyv_6JeKgdzo2zXOgsu040riaKMNALwnMzia5VSzxRRUCWSz9xiGZdlgCQdkKBU26qSDC1stcFBF8MNaAprRAo-HkOSGYYrBJGa5Pq_hyrfXyCBZMqZwZqSBOemHAWV94n-cAAYuwzKCNo65r8sHLeiBkc4Fdl_iHUT9wN7K5r6yTxkFi49id4Njo4GAKIWcfE2xIEGaaKJ3lKBXOIT4sY2-iFTpXnIC-88MqMfMNTD6dYV5mZTcvjnnxoF1244HB_WPCaoaSWx-UZ82NoOrjVrQvkic0AvGIQHHfwJwK0YfoAR3J0OGUBzlnJmALVZ_mRnYuLcwnsWPvxIUnB7DwctbH6ZXq6-1V5qN_E0Iuo-xVducgwSIZdUVtbFmKo3MlHwJMuS29A91YIngRhZtvUU8aUU6Rk9nOuXbfTC83yOXfluV8E34Gkl6vNHLgF_Z8hAD85CZhsD5CncJFI2IoZTt04AfkgD8H-pP0ZFIKEdCeFB-QNQfJn4-RFxW43J6czpWXJ3pekv3Nh0joLuhYtFS8I7lsPC7SxAcpZtLPtM1gH2DUCeUsW6qTz6OUmZvYt-DCJwpVZ5Tu-o2e6SfcbIc47kz9GwWqxAMdU330GK3YG_dOnGQf1KLFkkhIesJkukFZrcYuQxJaJtrp0Zdaw3wG6PrLpXqirUGZ_juokz3dBflRUz9T2ZvnQL7BH_Z3MHce6HnB5lT6Loh5nfXMxp0iypC481p_kcYrNiaeFd2heqinuQFlEEydd1ryu6i44vpQiF2wDsTD1uhyKU7HepQxsTrr-7hLiNboTNOjLnD5MSLAYRwNOg21jE1J75zoYjXStJWCfAHHxIuxoPAiqWph-laRkbCQzETaVXAsPoUPFLY05WVcAMr-eGZlBI1-6kTR4NEmu5K9kk23IIv3GN35xilB7MMzE7k7BQ31uRuKoJQwjRW2oubEY-dOdp1nYPsHJG0XhHSPGg-qdlVR1VHAyX-S_YtuliVQFQErI7_rzuCnw7JG5OpUCalKH6FPtAZV2NZ3gp4zdcELJlJDIDYT8cGmzdqtT4rZC5Pp1pOyn4_z0Xl5-9cAW2DM5TrtXXtaN6jHX6bVjFFF0ux_92_f9-p_9MI4Pok_yYiYSC-w_6oXRq2WnxiRzQrrSZQXv0c8-k1j5sc63D1zffAkA9IR_5_sdcWDCGN5whjVRQSwrAxNDaplbpR-feL9nRtXvifgN8YsVtVP_V_1BCbJb426o4_qhE_Uqt5rYP2zdjEBPtAQnd79qVr_MMVYQEfxwSUN8ZuGReSF6-DmBZpaJjSYZJUrkG8eMP_XiDejaJJvo0uiB3KPNGDXx9sEmHwsniPCqZICfctjWjYsEmFMLYGjR0szKJnTanopn4PCrfEDA4z6Kcq-i9BBpl_p_jxLAtdO1Yvp1_RQ8ekd8yR57hlxOEXf6M9M1eDmOD7lx3JPR-ZWNhT-_izdT7L-xAzwlC_RSuFP-jaBqAq56jviGeNhbDr_mI7LmzIhBXA7bZuEH0XyXgZRgtKOvfIbR3zbdtFhEg9-lcbq7YE8w4YIeWYAFFrl5ETwu36EjQuJNVR-mxh-Ii9UVLIOMrnVdnIk0H-l2ddac5_eoasDfIrDbJ5TyXOrcX3wgf6xONpHWQJHI-YsCrlJHEomedUx2mfBlHm-sfCnbszeQefxdVRY716g0Zc_ETMrD16Q5otH3WrctOimyCascLMC7GgFXMEUtC3kUif00qdx0TceSOPpxSnYHlPZx84Q03GaTNAJ3ieXcd14pAJ0qvhlTMwRA3EQyZZJff7Ixk61j5SlEIj19dNWIlpV9fbx4HItw7Utjsc4-g6sC-m4cI7rL3dUqFuSMLeMlLUBm5AGlfvRCP5-HewhisEpWHWme3pmZUEd8YHZfidBjui2Tb2V-PzA5wc_TE4O6bk3kCFtBrywblkqc3fPVsCYbiLv-RnC7MThdw-W56FDjxsIAcrjLUUZLTL3m-nW0iVGY20eIhFy3qAhhk2GYOiRysYW0lcqh-Ws_VyETRlnRlC-yyILyworMZE2s8ddBrrlaxk7dMxbxEbKdQDUIbVlfc9Hz_no2GSQ5Pl0WVD7QL416cHvRIWExaSa89Anaf8ZXPJgLexTDTVb36lKZbtksIxlqEIRko_KTHOqfkXzU6pvwYr0ZPTnuNdw_JhVFFx5-4vRbULazfHwniblQkB4E1syotYdBm8eue-0P0E_bdfoAJ5AHonNVL_jgWg7b0nWjdiwgBi66UZgq-UpHL7OHESSnjCaJz6L-kMDzcjwOfHl3MayQfz7HtPTtOayXT4uPumUuvATFF5iP614N2S0M0Bc8WKpurjcwDR4Ku_7sURA7WrmvZaf3ze4YVpBqraSre5IlRQfxyV5xBxlFww0bVVuHz7TBcmi17OvrvFWpwOkQE6MIUJQBq6Mr2gFv7OrPmAeUzcO-kcsM2HyaIYODx0IjB3Ix4TuqXEjZPeu27dADK1DnASnx3KoedVLwv9jVj_W0mikNmdnDBgHjkuhOH2ey_BhtTwmVAmMs5W_2wt7cVQAhNbJ_US6qtcSGFNkRdlUWWgw6W-rHQphwkSZ7hfAMDxeJ-RkJ6gULEfZUzaYqRM34Y6-pvUL2b01U8tkdJ_pJn6zycaYPAn_1lvz3dminoZWZv8oHA9BfqdWD4K6TZi4O1eSC8vwph8bvA-7Am-h0frNem3lPunSQCQ7bc8dEKCsXbN9ZfMVJgl3DejduD9yWM0nDgfwRbftynem6WpdbgRMtveMMuQBwk_a6Ml42CfucfOofCxQgR_sz9vW3oLeqs; _oauth2_proxy_1=LWPtAT_obdWRfW9HVnNJy9E1mI4PF8MNJ1W5ZHqMC70SUhIyN2Efx70bEfQvK4R_6CQIsujYj2XzWEy81F2UTNIibgIOu25mZgLUscu9F2UkTYoC3R-Bd-2Y9Jdb7fGk8lNzLFeOj8OVZESf2jxqcjxuE97CICUYILZVfXyreqJ1Glrb3L4zagp8DOEnbWzz03bJNhDKN_Rr9T7MBLbaIiSS96fmTeMpAUKqVQZxSpXcgavdcvvScsLtmTrJDtV07UQwq6TffSKdqJ89ce7VIjC0nSUdaiaDH8DXpEb8WNohkYLp1wsdzavSA8JSiSxwv7AKiGjqyVGnbSP3k1jzTiaBbeGakNjDqejjgCbCx7Mk1RrUcOHNaZTY4avW5UsssRr-hlatd6tmQgf8zXD3-N57UFYYtS_Wq4FfOnTrDwW2nk4wrsMB9dtDuOJO3RYYQaxiRExOJb9T3G1BhvUnnO3hkNJVT3Bz_AU2Q0-kqcb0rNPr2o3NasTcXvIBq6s1YYeUduFD8v1Cde4EDDE_jS4gwR3KAuo8HDwc_HHSm5LIl_l8BPWwr6zSlD574GTYaCK1nkJbDNs9B5FVviROcuHrEXyJ_qpPmQhRjUW5FuPMkh224unkSweqZdLLNXabI9rKUnuKMy89Ssqea-rpV-lU3zGa2i7gkWj_-P3VN9A_K3U_0-dioLw7RKbewXwFU-yGFUKXATmdUSNCmsLAc5eEP4uLuH2v5AJOGUF7A8-NCAd3zMawAJYbTQKDYlO_qM4pB-fb2SdRnqf2eLAtO2GpiUo99nNxhqRbpbL65JQVyS_sYzUfjKBvwfjVRh2c_ufZa9lxOOB0d5aBXPtdtjjYJM44Lxr-3QFwsWfd9vIXbEdzfs0LqlVpbuqFZKk4XCdaO8H7IBuVVq1B0yl473SM5uh1kz3xziObvo72dnS0TqETQzstT0wTwwjIgI_4-HhvVkQUcrjQ1_jKYrNsdpaTxqR1YveP12htfUH9rVj0VZLy5bI9PR-S2S5hnfAdHjVctvrH_G4foIxZCU4dt4j-EChMwYkS4kbxgk1-oUK9kfOccHBFJOfSeX_TdKx2X0h5RFIikko1ABonhveqmFrBfW0X_Hv89quR89CejSAWPgEF-E7GuWpGIJDvfXiV_NIK1wrC4c47PbvNN4QPa84lktspHrWHQRmNVdFCfFvnTEy69-jbQnQG0ga7eypRXaNhY3ce1zyuB-qVIqFXToRNiOjhPlQ6b0VhXATotdez1jhWXxeXBDUOiw68j4--W_VZD4KLVuVguYDnu5gaTCQQbEJLA==|1746485719|5v4PVWoBj72abMBtQVLnntRaurVy4SJniROwTnhg5o4=; _dd_s=logs=1&id=e81cbb66-5cad-4dcb-a9f5-8b3f3eec9aa4&created=1746704591887&expire=1746706957550"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"company_name\": \"Test for Thursday\",\n    \"participant\": \"GLN:4041865000021\",\n    \"company_type\": \"prod\",\n    \"contact\": \"testing@mailinator.com\",\n    \"website\": \"demo\",\n    \"phonenumber\": \"{{$randomPhoneNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/update-participant_details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"update-participant_details"
							]
						},
						"description": "Used to update the Participant Details"
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"company_name\": \"<string>\",\n  \"company_type\": \"<string>\",\n  \"participant\": \"<string>\",\n  \"contact\": \"<string>\",\n  \"phonenumber\": \"<string>\",\n  \"website\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/update-participant_details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"update-participant_details"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "Update Participants Detail - Nonexisting participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// ✅ Check response status",
									"pm.test(\"Response status is 200 OK\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// ❌ Fail the test if `success` is false",
									"pm.test(\"Participant must exist and be updated\", () => {",
									"    pm.expect(response.success, \"Expected participant to be updated, but it failed\").to.eql(true);",
									"});",
									"",
									"// 🔍 Optional: Log for debugging if failure occurs",
									"if (!response.success) {",
									"    console.log(\"Participant update failed. Message:\", response.details.message);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en,en-US;q=0.9"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJDVlZXbDZDcF9TcE44LXJaZFl3OXdZQlB0SW1VdTBmM0Nmd3gtMklQMUF3In0.eyJleHAiOjE3NDY3MDYzNDIsImlhdCI6MTc0NjcwNjA0MiwiYXV0aF90aW1lIjoxNzQ2NzAwNjAxLCJqdGkiOiIwNThlZDY1OS0wZDlkLTRiYmYtOWEyNy01YzU0MTMyNTdiYjgiLCJpc3MiOiJodHRwczovL2RlbW8uZGZxdC5vcmcvaWFtL3JlYWxtcy9nYWluIiwiYXVkIjpbImlzdGlvLWdhdGV3YXktdGxzLWNsaWVudCIsInJlYWxtLW1hbmFnZW1lbnQiLCJicm9rZXIiLCJhY2NvdW50Il0sInN1YiI6IjFlMTUyNDRlLTkwMGMtNDU0ZS04MTEwLWY1YzE4NDA3YjAxOCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImdhaW4tdXNlci1tYW5hZ2VtZW50Iiwibm9uY2UiOiIzNGFhMzNhYy00YWFkLTQ0NDMtOGNlZi1jYzExYTU3OTUyMTMiLCJzZXNzaW9uX3N0YXRlIjoiOTkzZTYxNjItM2MyNi00MjRkLThhNGMtN2VkNTBiMGQ4ZmI0IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2RlbW8uZGZxdC5vcmciXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJwYXJ0aWNpcGFudC1tYW5hZ2VyIiwiZGVmYXVsdC1yb2xlcy1nYWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsicmVhbG0tbWFuYWdlbWVudCI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsInJlYWxtLWFkbWluIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJicm9rZXIiOnsicm9sZXMiOlsicmVhZC10b2tlbiJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctYXBwbGljYXRpb25zIiwidmlldy1jb25zZW50Iiwidmlldy1ncm91cHMiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsIm1hbmFnZS1jb25zZW50IiwiZGVsZXRlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBvcmctcm9sZSBpc3Rpby1nYXRld2F5LXRscy1jbGllbnQtYXVkaWVuY2UgcHJvZmlsZSIsInNpZCI6Ijk5M2U2MTYyLTNjMjYtNDI0ZC04YTRjLTdlZDUwYjBkOGZiNCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IkFzc3VyZGx5IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXNzdXJkbHktcGFydGljaXBhbnQtbWdtdCIsImdpdmVuX25hbWUiOiJBc3N1cmRseSIsImZhbWlseV9uYW1lIjoiIiwiZW1haWwiOiJhc3N1cmRseS1wYXJ0aWNpcGFudC1tZ210QGV4YW1wbGUuY29tIn0.ma3m3aUzkYG4eDoyrgf8LM6pi8kBd-T5rrEzX7rDUlCPifC_EE8bcFBrjf3a2hi2Pb5tI4IJRC3AoGidw3mAmFvuwLaijH9ER_2qjdJ2kQb8dcFLobw8nIUeWBCtdO5Axl7OSDoNNks9Xc2T6NhSxzKyV7N9-fhef47kjf3AsxYrMaVbExWLHSjDxvZ7MWKSR6jKcckPuAcS8eFZ1XIiF6JkyNqBtTpxnybFcEaoZJgOme3uMJPBPbAUUgDFtox2YDqryHoR8o65BnV-Fn1DVV3BUak9lNNsWQJVv_0-97BLRrt7Ld0aWfWGM79t4fth1fQuG2Pd1bk6JHDFwc2g5Q"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "origin",
								"value": "https://demo.dfqt.org"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://demo.dfqt.org/user/participant/edit/R0xOOjQwNDE4NjUwMDAwMjE=/master"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36"
							},
							{
								"key": "Cookie",
								"value": "_oauth2_proxy_0=qNZ5zbmxxyi8YPLXIC7YFIryS_uJJTBq6n9HNw2V2ou5F4BDcsHiEgz9FMUGHfgbA4fNng1Vx3lnlaznjDggNTHFLSSIoruomYNPDHUKrsNAanSa01dSk2kq4tNbAh91hg97j3L0ctXrG-fsjzNZMwzj5rphyCDWDFbnXO1QzZDki6lvA3lYeSpRO6__Tb04DONyANsSRTfHyWuvxrSYhd0yLaU-hogDCEW9MEfvmDestCYlrj3f0m-lGesDo1G-p2MrBUsQrqDCYz5-2YQYwn14WEMOKNpMQIrr6Af7YlkRuAjcTv4vEuUVD9U1PSVQUQDaGJ7gEZcqKnRHLFQF9WBaVrZRf_sqkrrK6NkfVpdOZ7pW2ZXMk2um4_lBf2rVJXawP9zWzb64-LJsYhJXJbGLvju9C5l1QlAI1ovxQsjmKcipKhCx9xxQII_bKdYF9jalhEdLEnLtHDYHw_gJD8KLVnV6IaWWPon9GGUvbwFJ5boCSXTjoGlIQkL5j70t9WE0sgJNCr7oeIfFTS2VxmGdbjoPeAP7bZqR85kmEHApIVCZtTy0xKJ5ECZLmipQev6Qe33eCJOby9xqOjFvDUb1kiVtfnj0hXS2FnYbCDKTbDnLZJv3m537sFH3oTvXZ2h8XCaimC8nCRmJT39CkUXoG7DeY96LzGsqm98oy0FgEyI8tmfdhvj5g1P4s6PQk28c8lqBsVPV-Pw-h0Z7KdvqvNxII6M1tRO0JXJn8oK_lUQYcV7WMVvyhPE6JZHI0xC3xnISgAwYPYMoQjTMA_AKj5aN4YYj976IuZ_84euouiSMZ9oyIdLcHXgRhtU7r0y2cMJ8CS62NNeI2AStVwfTY6CgD1gQCIFKwDsU2mPanvGdn6Y4skD6IERCp5wI1aW8btjEii_-pu00LnzPmasxnpTBh5GnVikd3Rk3gNYleydfP8YhZFk64WZ3mnBaA6fgJIWgWaFNWLHqVIYIop3NphiDXmqD6flHsJKBEU-N-IPggJe9UN_kO2a7xs-Q8FAEl8P4gfaQ6CJwNfyxzTK1JdHVLSnkTojguSywg21FZ-o2-QiD_cpPZCIVa2xyv_6JeKgdzo2zXOgsu040riaKMNALwnMzia5VSzxRRUCWSz9xiGZdlgCQdkKBU26qSDC1stcFBF8MNaAprRAo-HkOSGYYrBJGa5Pq_hyrfXyCBZMqZwZqSBOemHAWV94n-cAAYuwzKCNo65r8sHLeiBkc4Fdl_iHUT9wN7K5r6yTxkFi49id4Njo4GAKIWcfE2xIEGaaKJ3lKBXOIT4sY2-iFTpXnIC-88MqMfMNTD6dYV5mZTcvjnnxoF1244HB_WPCaoaSWx-UZ82NoOrjVrQvkic0AvGIQHHfwJwK0YfoAR3J0OGUBzlnJmALVZ_mRnYuLcwnsWPvxIUnB7DwctbH6ZXq6-1V5qN_E0Iuo-xVducgwSIZdUVtbFmKo3MlHwJMuS29A91YIngRhZtvUU8aUU6Rk9nOuXbfTC83yOXfluV8E34Gkl6vNHLgF_Z8hAD85CZhsD5CncJFI2IoZTt04AfkgD8H-pP0ZFIKEdCeFB-QNQfJn4-RFxW43J6czpWXJ3pekv3Nh0joLuhYtFS8I7lsPC7SxAcpZtLPtM1gH2DUCeUsW6qTz6OUmZvYt-DCJwpVZ5Tu-o2e6SfcbIc47kz9GwWqxAMdU330GK3YG_dOnGQf1KLFkkhIesJkukFZrcYuQxJaJtrp0Zdaw3wG6PrLpXqirUGZ_juokz3dBflRUz9T2ZvnQL7BH_Z3MHce6HnB5lT6Loh5nfXMxp0iypC481p_kcYrNiaeFd2heqinuQFlEEydd1ryu6i44vpQiF2wDsTD1uhyKU7HepQxsTrr-7hLiNboTNOjLnD5MSLAYRwNOg21jE1J75zoYjXStJWCfAHHxIuxoPAiqWph-laRkbCQzETaVXAsPoUPFLY05WVcAMr-eGZlBI1-6kTR4NEmu5K9kk23IIv3GN35xilB7MMzE7k7BQ31uRuKoJQwjRW2oubEY-dOdp1nYPsHJG0XhHSPGg-qdlVR1VHAyX-S_YtuliVQFQErI7_rzuCnw7JG5OpUCalKH6FPtAZV2NZ3gp4zdcELJlJDIDYT8cGmzdqtT4rZC5Pp1pOyn4_z0Xl5-9cAW2DM5TrtXXtaN6jHX6bVjFFF0ux_92_f9-p_9MI4Pok_yYiYSC-w_6oXRq2WnxiRzQrrSZQXv0c8-k1j5sc63D1zffAkA9IR_5_sdcWDCGN5whjVRQSwrAxNDaplbpR-feL9nRtXvifgN8YsVtVP_V_1BCbJb426o4_qhE_Uqt5rYP2zdjEBPtAQnd79qVr_MMVYQEfxwSUN8ZuGReSF6-DmBZpaJjSYZJUrkG8eMP_XiDejaJJvo0uiB3KPNGDXx9sEmHwsniPCqZICfctjWjYsEmFMLYGjR0szKJnTanopn4PCrfEDA4z6Kcq-i9BBpl_p_jxLAtdO1Yvp1_RQ8ekd8yR57hlxOEXf6M9M1eDmOD7lx3JPR-ZWNhT-_izdT7L-xAzwlC_RSuFP-jaBqAq56jviGeNhbDr_mI7LmzIhBXA7bZuEH0XyXgZRgtKOvfIbR3zbdtFhEg9-lcbq7YE8w4YIeWYAFFrl5ETwu36EjQuJNVR-mxh-Ii9UVLIOMrnVdnIk0H-l2ddac5_eoasDfIrDbJ5TyXOrcX3wgf6xONpHWQJHI-YsCrlJHEomedUx2mfBlHm-sfCnbszeQefxdVRY716g0Zc_ETMrD16Q5otH3WrctOimyCascLMC7GgFXMEUtC3kUif00qdx0TceSOPpxSnYHlPZx84Q03GaTNAJ3ieXcd14pAJ0qvhlTMwRA3EQyZZJff7Ixk61j5SlEIj19dNWIlpV9fbx4HItw7Utjsc4-g6sC-m4cI7rL3dUqFuSMLeMlLUBm5AGlfvRCP5-HewhisEpWHWme3pmZUEd8YHZfidBjui2Tb2V-PzA5wc_TE4O6bk3kCFtBrywblkqc3fPVsCYbiLv-RnC7MThdw-W56FDjxsIAcrjLUUZLTL3m-nW0iVGY20eIhFy3qAhhk2GYOiRysYW0lcqh-Ws_VyETRlnRlC-yyILyworMZE2s8ddBrrlaxk7dMxbxEbKdQDUIbVlfc9Hz_no2GSQ5Pl0WVD7QL416cHvRIWExaSa89Anaf8ZXPJgLexTDTVb36lKZbtksIxlqEIRko_KTHOqfkXzU6pvwYr0ZPTnuNdw_JhVFFx5-4vRbULazfHwniblQkB4E1syotYdBm8eue-0P0E_bdfoAJ5AHonNVL_jgWg7b0nWjdiwgBi66UZgq-UpHL7OHESSnjCaJz6L-kMDzcjwOfHl3MayQfz7HtPTtOayXT4uPumUuvATFF5iP614N2S0M0Bc8WKpurjcwDR4Ku_7sURA7WrmvZaf3ze4YVpBqraSre5IlRQfxyV5xBxlFww0bVVuHz7TBcmi17OvrvFWpwOkQE6MIUJQBq6Mr2gFv7OrPmAeUzcO-kcsM2HyaIYODx0IjB3Ix4TuqXEjZPeu27dADK1DnASnx3KoedVLwv9jVj_W0mikNmdnDBgHjkuhOH2ey_BhtTwmVAmMs5W_2wt7cVQAhNbJ_US6qtcSGFNkRdlUWWgw6W-rHQphwkSZ7hfAMDxeJ-RkJ6gULEfZUzaYqRM34Y6-pvUL2b01U8tkdJ_pJn6zycaYPAn_1lvz3dminoZWZv8oHA9BfqdWD4K6TZi4O1eSC8vwph8bvA-7Am-h0frNem3lPunSQCQ7bc8dEKCsXbN9ZfMVJgl3DejduD9yWM0nDgfwRbftynem6WpdbgRMtveMMuQBwk_a6Ml42CfucfOofCxQgR_sz9vW3oLeqs; _oauth2_proxy_1=LWPtAT_obdWRfW9HVnNJy9E1mI4PF8MNJ1W5ZHqMC70SUhIyN2Efx70bEfQvK4R_6CQIsujYj2XzWEy81F2UTNIibgIOu25mZgLUscu9F2UkTYoC3R-Bd-2Y9Jdb7fGk8lNzLFeOj8OVZESf2jxqcjxuE97CICUYILZVfXyreqJ1Glrb3L4zagp8DOEnbWzz03bJNhDKN_Rr9T7MBLbaIiSS96fmTeMpAUKqVQZxSpXcgavdcvvScsLtmTrJDtV07UQwq6TffSKdqJ89ce7VIjC0nSUdaiaDH8DXpEb8WNohkYLp1wsdzavSA8JSiSxwv7AKiGjqyVGnbSP3k1jzTiaBbeGakNjDqejjgCbCx7Mk1RrUcOHNaZTY4avW5UsssRr-hlatd6tmQgf8zXD3-N57UFYYtS_Wq4FfOnTrDwW2nk4wrsMB9dtDuOJO3RYYQaxiRExOJb9T3G1BhvUnnO3hkNJVT3Bz_AU2Q0-kqcb0rNPr2o3NasTcXvIBq6s1YYeUduFD8v1Cde4EDDE_jS4gwR3KAuo8HDwc_HHSm5LIl_l8BPWwr6zSlD574GTYaCK1nkJbDNs9B5FVviROcuHrEXyJ_qpPmQhRjUW5FuPMkh224unkSweqZdLLNXabI9rKUnuKMy89Ssqea-rpV-lU3zGa2i7gkWj_-P3VN9A_K3U_0-dioLw7RKbewXwFU-yGFUKXATmdUSNCmsLAc5eEP4uLuH2v5AJOGUF7A8-NCAd3zMawAJYbTQKDYlO_qM4pB-fb2SdRnqf2eLAtO2GpiUo99nNxhqRbpbL65JQVyS_sYzUfjKBvwfjVRh2c_ufZa9lxOOB0d5aBXPtdtjjYJM44Lxr-3QFwsWfd9vIXbEdzfs0LqlVpbuqFZKk4XCdaO8H7IBuVVq1B0yl473SM5uh1kz3xziObvo72dnS0TqETQzstT0wTwwjIgI_4-HhvVkQUcrjQ1_jKYrNsdpaTxqR1YveP12htfUH9rVj0VZLy5bI9PR-S2S5hnfAdHjVctvrH_G4foIxZCU4dt4j-EChMwYkS4kbxgk1-oUK9kfOccHBFJOfSeX_TdKx2X0h5RFIikko1ABonhveqmFrBfW0X_Hv89quR89CejSAWPgEF-E7GuWpGIJDvfXiV_NIK1wrC4c47PbvNN4QPa84lktspHrWHQRmNVdFCfFvnTEy69-jbQnQG0ga7eypRXaNhY3ce1zyuB-qVIqFXToRNiOjhPlQ6b0VhXATotdez1jhWXxeXBDUOiw68j4--W_VZD4KLVuVguYDnu5gaTCQQbEJLA==|1746485719|5v4PVWoBj72abMBtQVLnntRaurVy4SJniROwTnhg5o4=; _dd_s=logs=1&id=e81cbb66-5cad-4dcb-a9f5-8b3f3eec9aa4&created=1746704591887&expire=1746706957550"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"company_name\": \"Test for Thursday\",\n    \"participant\": \"TESTING:4041865004444\",\n    \"company_type\": \"prod\",\n    \"contact\": \"testing@mailinator.com\",\n    \"website\": \"demo\",\n    \"phonenumber\": \"{{$randomPhoneNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/update-participant_details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"update-participant_details"
							]
						},
						"description": "Used to update the Participant Details"
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"company_name\": \"<string>\",\n  \"company_type\": \"<string>\",\n  \"participant\": \"<string>\",\n  \"contact\": \"<string>\",\n  \"phonenumber\": \"<string>\",\n  \"website\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/update-participant_details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"update-participant_details"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "Update Participants Detail - Valid Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// ✅ Check response status",
									"pm.test(\"Response status is 200 OK\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// ✅ Check success is false",
									"pm.test(\"Response success is false\", () => {",
									"    pm.expect(response.success).to.eql(false);",
									"});",
									"",
									"// ✅ Check that data is an empty array",
									"pm.test(\"Data is an empty array\", () => {",
									"    pm.expect(response.data).to.be.an(\"array\").that.is.empty;",
									"});",
									"",
									"// ✅ Check details structure",
									"pm.test(\"Details object is present and valid\", () => {",
									"    pm.expect(response).to.have.property(\"details\");",
									"    pm.expect(response.details).to.have.property(\"message\").that.is.a(\"string\");",
									"    pm.expect(response.details).to.have.property(\"detail\").that.is.a(\"string\");",
									"});",
									"",
									"// ✅ Optional: Check specific message content",
									"pm.test(\"Message indicates no update occurred\", () => {",
									"    pm.expect(response.details.message).to.eql(\"No details updated to participant\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en,en-US;q=0.9"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJDVlZXbDZDcF9TcE44LXJaZFl3OXdZQlB0SW1VdTBmM0Nmd3gtMklQMUF3In0.eyJleHAiOjE3NDY3MDYzNDIsImlhdCI6MTc0NjcwNjA0MiwiYXV0aF90aW1lIjoxNzQ2NzAwNjAxLCJqdGkiOiIwNThlZDY1OS0wZDlkLTRiYmYtOWEyNy01YzU0MTMyNTdiYjgiLCJpc3MiOiJodHRwczovL2RlbW8uZGZxdC5vcmcvaWFtL3JlYWxtcy9nYWluIiwiYXVkIjpbImlzdGlvLWdhdGV3YXktdGxzLWNsaWVudCIsInJlYWxtLW1hbmFnZW1lbnQiLCJicm9rZXIiLCJhY2NvdW50Il0sInN1YiI6IjFlMTUyNDRlLTkwMGMtNDU0ZS04MTEwLWY1YzE4NDA3YjAxOCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImdhaW4tdXNlci1tYW5hZ2VtZW50Iiwibm9uY2UiOiIzNGFhMzNhYy00YWFkLTQ0NDMtOGNlZi1jYzExYTU3OTUyMTMiLCJzZXNzaW9uX3N0YXRlIjoiOTkzZTYxNjItM2MyNi00MjRkLThhNGMtN2VkNTBiMGQ4ZmI0IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2RlbW8uZGZxdC5vcmciXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJwYXJ0aWNpcGFudC1tYW5hZ2VyIiwiZGVmYXVsdC1yb2xlcy1nYWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsicmVhbG0tbWFuYWdlbWVudCI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsInJlYWxtLWFkbWluIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJicm9rZXIiOnsicm9sZXMiOlsicmVhZC10b2tlbiJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctYXBwbGljYXRpb25zIiwidmlldy1jb25zZW50Iiwidmlldy1ncm91cHMiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsIm1hbmFnZS1jb25zZW50IiwiZGVsZXRlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBvcmctcm9sZSBpc3Rpby1nYXRld2F5LXRscy1jbGllbnQtYXVkaWVuY2UgcHJvZmlsZSIsInNpZCI6Ijk5M2U2MTYyLTNjMjYtNDI0ZC04YTRjLTdlZDUwYjBkOGZiNCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IkFzc3VyZGx5IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXNzdXJkbHktcGFydGljaXBhbnQtbWdtdCIsImdpdmVuX25hbWUiOiJBc3N1cmRseSIsImZhbWlseV9uYW1lIjoiIiwiZW1haWwiOiJhc3N1cmRseS1wYXJ0aWNpcGFudC1tZ210QGV4YW1wbGUuY29tIn0.ma3m3aUzkYG4eDoyrgf8LM6pi8kBd-T5rrEzX7rDUlCPifC_EE8bcFBrjf3a2hi2Pb5tI4IJRC3AoGidw3mAmFvuwLaijH9ER_2qjdJ2kQb8dcFLobw8nIUeWBCtdO5Axl7OSDoNNks9Xc2T6NhSxzKyV7N9-fhef47kjf3AsxYrMaVbExWLHSjDxvZ7MWKSR6jKcckPuAcS8eFZ1XIiF6JkyNqBtTpxnybFcEaoZJgOme3uMJPBPbAUUgDFtox2YDqryHoR8o65BnV-Fn1DVV3BUak9lNNsWQJVv_0-97BLRrt7Ld0aWfWGM79t4fth1fQuG2Pd1bk6JHDFwc2g5Q"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "origin",
								"value": "https://demo.dfqt.org"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://demo.dfqt.org/user/participant/edit/R0xOOjQwNDE4NjUwMDAwMjE=/master"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36"
							},
							{
								"key": "Cookie",
								"value": "_oauth2_proxy_0=qNZ5zbmxxyi8YPLXIC7YFIryS_uJJTBq6n9HNw2V2ou5F4BDcsHiEgz9FMUGHfgbA4fNng1Vx3lnlaznjDggNTHFLSSIoruomYNPDHUKrsNAanSa01dSk2kq4tNbAh91hg97j3L0ctXrG-fsjzNZMwzj5rphyCDWDFbnXO1QzZDki6lvA3lYeSpRO6__Tb04DONyANsSRTfHyWuvxrSYhd0yLaU-hogDCEW9MEfvmDestCYlrj3f0m-lGesDo1G-p2MrBUsQrqDCYz5-2YQYwn14WEMOKNpMQIrr6Af7YlkRuAjcTv4vEuUVD9U1PSVQUQDaGJ7gEZcqKnRHLFQF9WBaVrZRf_sqkrrK6NkfVpdOZ7pW2ZXMk2um4_lBf2rVJXawP9zWzb64-LJsYhJXJbGLvju9C5l1QlAI1ovxQsjmKcipKhCx9xxQII_bKdYF9jalhEdLEnLtHDYHw_gJD8KLVnV6IaWWPon9GGUvbwFJ5boCSXTjoGlIQkL5j70t9WE0sgJNCr7oeIfFTS2VxmGdbjoPeAP7bZqR85kmEHApIVCZtTy0xKJ5ECZLmipQev6Qe33eCJOby9xqOjFvDUb1kiVtfnj0hXS2FnYbCDKTbDnLZJv3m537sFH3oTvXZ2h8XCaimC8nCRmJT39CkUXoG7DeY96LzGsqm98oy0FgEyI8tmfdhvj5g1P4s6PQk28c8lqBsVPV-Pw-h0Z7KdvqvNxII6M1tRO0JXJn8oK_lUQYcV7WMVvyhPE6JZHI0xC3xnISgAwYPYMoQjTMA_AKj5aN4YYj976IuZ_84euouiSMZ9oyIdLcHXgRhtU7r0y2cMJ8CS62NNeI2AStVwfTY6CgD1gQCIFKwDsU2mPanvGdn6Y4skD6IERCp5wI1aW8btjEii_-pu00LnzPmasxnpTBh5GnVikd3Rk3gNYleydfP8YhZFk64WZ3mnBaA6fgJIWgWaFNWLHqVIYIop3NphiDXmqD6flHsJKBEU-N-IPggJe9UN_kO2a7xs-Q8FAEl8P4gfaQ6CJwNfyxzTK1JdHVLSnkTojguSywg21FZ-o2-QiD_cpPZCIVa2xyv_6JeKgdzo2zXOgsu040riaKMNALwnMzia5VSzxRRUCWSz9xiGZdlgCQdkKBU26qSDC1stcFBF8MNaAprRAo-HkOSGYYrBJGa5Pq_hyrfXyCBZMqZwZqSBOemHAWV94n-cAAYuwzKCNo65r8sHLeiBkc4Fdl_iHUT9wN7K5r6yTxkFi49id4Njo4GAKIWcfE2xIEGaaKJ3lKBXOIT4sY2-iFTpXnIC-88MqMfMNTD6dYV5mZTcvjnnxoF1244HB_WPCaoaSWx-UZ82NoOrjVrQvkic0AvGIQHHfwJwK0YfoAR3J0OGUBzlnJmALVZ_mRnYuLcwnsWPvxIUnB7DwctbH6ZXq6-1V5qN_E0Iuo-xVducgwSIZdUVtbFmKo3MlHwJMuS29A91YIngRhZtvUU8aUU6Rk9nOuXbfTC83yOXfluV8E34Gkl6vNHLgF_Z8hAD85CZhsD5CncJFI2IoZTt04AfkgD8H-pP0ZFIKEdCeFB-QNQfJn4-RFxW43J6czpWXJ3pekv3Nh0joLuhYtFS8I7lsPC7SxAcpZtLPtM1gH2DUCeUsW6qTz6OUmZvYt-DCJwpVZ5Tu-o2e6SfcbIc47kz9GwWqxAMdU330GK3YG_dOnGQf1KLFkkhIesJkukFZrcYuQxJaJtrp0Zdaw3wG6PrLpXqirUGZ_juokz3dBflRUz9T2ZvnQL7BH_Z3MHce6HnB5lT6Loh5nfXMxp0iypC481p_kcYrNiaeFd2heqinuQFlEEydd1ryu6i44vpQiF2wDsTD1uhyKU7HepQxsTrr-7hLiNboTNOjLnD5MSLAYRwNOg21jE1J75zoYjXStJWCfAHHxIuxoPAiqWph-laRkbCQzETaVXAsPoUPFLY05WVcAMr-eGZlBI1-6kTR4NEmu5K9kk23IIv3GN35xilB7MMzE7k7BQ31uRuKoJQwjRW2oubEY-dOdp1nYPsHJG0XhHSPGg-qdlVR1VHAyX-S_YtuliVQFQErI7_rzuCnw7JG5OpUCalKH6FPtAZV2NZ3gp4zdcELJlJDIDYT8cGmzdqtT4rZC5Pp1pOyn4_z0Xl5-9cAW2DM5TrtXXtaN6jHX6bVjFFF0ux_92_f9-p_9MI4Pok_yYiYSC-w_6oXRq2WnxiRzQrrSZQXv0c8-k1j5sc63D1zffAkA9IR_5_sdcWDCGN5whjVRQSwrAxNDaplbpR-feL9nRtXvifgN8YsVtVP_V_1BCbJb426o4_qhE_Uqt5rYP2zdjEBPtAQnd79qVr_MMVYQEfxwSUN8ZuGReSF6-DmBZpaJjSYZJUrkG8eMP_XiDejaJJvo0uiB3KPNGDXx9sEmHwsniPCqZICfctjWjYsEmFMLYGjR0szKJnTanopn4PCrfEDA4z6Kcq-i9BBpl_p_jxLAtdO1Yvp1_RQ8ekd8yR57hlxOEXf6M9M1eDmOD7lx3JPR-ZWNhT-_izdT7L-xAzwlC_RSuFP-jaBqAq56jviGeNhbDr_mI7LmzIhBXA7bZuEH0XyXgZRgtKOvfIbR3zbdtFhEg9-lcbq7YE8w4YIeWYAFFrl5ETwu36EjQuJNVR-mxh-Ii9UVLIOMrnVdnIk0H-l2ddac5_eoasDfIrDbJ5TyXOrcX3wgf6xONpHWQJHI-YsCrlJHEomedUx2mfBlHm-sfCnbszeQefxdVRY716g0Zc_ETMrD16Q5otH3WrctOimyCascLMC7GgFXMEUtC3kUif00qdx0TceSOPpxSnYHlPZx84Q03GaTNAJ3ieXcd14pAJ0qvhlTMwRA3EQyZZJff7Ixk61j5SlEIj19dNWIlpV9fbx4HItw7Utjsc4-g6sC-m4cI7rL3dUqFuSMLeMlLUBm5AGlfvRCP5-HewhisEpWHWme3pmZUEd8YHZfidBjui2Tb2V-PzA5wc_TE4O6bk3kCFtBrywblkqc3fPVsCYbiLv-RnC7MThdw-W56FDjxsIAcrjLUUZLTL3m-nW0iVGY20eIhFy3qAhhk2GYOiRysYW0lcqh-Ws_VyETRlnRlC-yyILyworMZE2s8ddBrrlaxk7dMxbxEbKdQDUIbVlfc9Hz_no2GSQ5Pl0WVD7QL416cHvRIWExaSa89Anaf8ZXPJgLexTDTVb36lKZbtksIxlqEIRko_KTHOqfkXzU6pvwYr0ZPTnuNdw_JhVFFx5-4vRbULazfHwniblQkB4E1syotYdBm8eue-0P0E_bdfoAJ5AHonNVL_jgWg7b0nWjdiwgBi66UZgq-UpHL7OHESSnjCaJz6L-kMDzcjwOfHl3MayQfz7HtPTtOayXT4uPumUuvATFF5iP614N2S0M0Bc8WKpurjcwDR4Ku_7sURA7WrmvZaf3ze4YVpBqraSre5IlRQfxyV5xBxlFww0bVVuHz7TBcmi17OvrvFWpwOkQE6MIUJQBq6Mr2gFv7OrPmAeUzcO-kcsM2HyaIYODx0IjB3Ix4TuqXEjZPeu27dADK1DnASnx3KoedVLwv9jVj_W0mikNmdnDBgHjkuhOH2ey_BhtTwmVAmMs5W_2wt7cVQAhNbJ_US6qtcSGFNkRdlUWWgw6W-rHQphwkSZ7hfAMDxeJ-RkJ6gULEfZUzaYqRM34Y6-pvUL2b01U8tkdJ_pJn6zycaYPAn_1lvz3dminoZWZv8oHA9BfqdWD4K6TZi4O1eSC8vwph8bvA-7Am-h0frNem3lPunSQCQ7bc8dEKCsXbN9ZfMVJgl3DejduD9yWM0nDgfwRbftynem6WpdbgRMtveMMuQBwk_a6Ml42CfucfOofCxQgR_sz9vW3oLeqs; _oauth2_proxy_1=LWPtAT_obdWRfW9HVnNJy9E1mI4PF8MNJ1W5ZHqMC70SUhIyN2Efx70bEfQvK4R_6CQIsujYj2XzWEy81F2UTNIibgIOu25mZgLUscu9F2UkTYoC3R-Bd-2Y9Jdb7fGk8lNzLFeOj8OVZESf2jxqcjxuE97CICUYILZVfXyreqJ1Glrb3L4zagp8DOEnbWzz03bJNhDKN_Rr9T7MBLbaIiSS96fmTeMpAUKqVQZxSpXcgavdcvvScsLtmTrJDtV07UQwq6TffSKdqJ89ce7VIjC0nSUdaiaDH8DXpEb8WNohkYLp1wsdzavSA8JSiSxwv7AKiGjqyVGnbSP3k1jzTiaBbeGakNjDqejjgCbCx7Mk1RrUcOHNaZTY4avW5UsssRr-hlatd6tmQgf8zXD3-N57UFYYtS_Wq4FfOnTrDwW2nk4wrsMB9dtDuOJO3RYYQaxiRExOJb9T3G1BhvUnnO3hkNJVT3Bz_AU2Q0-kqcb0rNPr2o3NasTcXvIBq6s1YYeUduFD8v1Cde4EDDE_jS4gwR3KAuo8HDwc_HHSm5LIl_l8BPWwr6zSlD574GTYaCK1nkJbDNs9B5FVviROcuHrEXyJ_qpPmQhRjUW5FuPMkh224unkSweqZdLLNXabI9rKUnuKMy89Ssqea-rpV-lU3zGa2i7gkWj_-P3VN9A_K3U_0-dioLw7RKbewXwFU-yGFUKXATmdUSNCmsLAc5eEP4uLuH2v5AJOGUF7A8-NCAd3zMawAJYbTQKDYlO_qM4pB-fb2SdRnqf2eLAtO2GpiUo99nNxhqRbpbL65JQVyS_sYzUfjKBvwfjVRh2c_ufZa9lxOOB0d5aBXPtdtjjYJM44Lxr-3QFwsWfd9vIXbEdzfs0LqlVpbuqFZKk4XCdaO8H7IBuVVq1B0yl473SM5uh1kz3xziObvo72dnS0TqETQzstT0wTwwjIgI_4-HhvVkQUcrjQ1_jKYrNsdpaTxqR1YveP12htfUH9rVj0VZLy5bI9PR-S2S5hnfAdHjVctvrH_G4foIxZCU4dt4j-EChMwYkS4kbxgk1-oUK9kfOccHBFJOfSeX_TdKx2X0h5RFIikko1ABonhveqmFrBfW0X_Hv89quR89CejSAWPgEF-E7GuWpGIJDvfXiV_NIK1wrC4c47PbvNN4QPa84lktspHrWHQRmNVdFCfFvnTEy69-jbQnQG0ga7eypRXaNhY3ce1zyuB-qVIqFXToRNiOjhPlQ6b0VhXATotdez1jhWXxeXBDUOiw68j4--W_VZD4KLVuVguYDnu5gaTCQQbEJLA==|1746485719|5v4PVWoBj72abMBtQVLnntRaurVy4SJniROwTnhg5o4=; _dd_s=logs=1&id=e81cbb66-5cad-4dcb-a9f5-8b3f3eec9aa4&created=1746704591887&expire=1746706957550"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"company_name\": \"\",\n    \"participant\": \"\",\n    \"company_type\": \"\",\n    \"contact\": \"\",\n    \"website\": \"\",\n    \"phonenumber\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/update-participant_details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"update-participant_details"
							]
						},
						"description": "Used to update the Participant Details"
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"company_name\": \"<string>\",\n  \"company_type\": \"<string>\",\n  \"participant\": \"<string>\",\n  \"contact\": \"<string>\",\n  \"phonenumber\": \"<string>\",\n  \"website\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/update-participant_details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"update-participant_details"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		},
		{
			"name": "Update Site",
			"item": [
				{
					"name": "Update Site Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// ✅ Check status code",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// ✅ Check that the response is successful",
									"pm.test(\"Response success is true\", () => {",
									"    pm.expect(response.success).to.eql(true);",
									"});",
									"",
									"// ✅ Ensure data is an array (even if empty)",
									"pm.test(\"Data is an array\", () => {",
									"    pm.expect(response.data).to.be.an(\"array\");",
									"});",
									"",
									"// ✅ Validate success message",
									"pm.test(\"Correct success message for site update\", () => {",
									"    pm.expect(response.details.message).to.eql(\"Site details updated successfully\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en,en-US;q=0.9"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJDVlZXbDZDcF9TcE44LXJaZFl3OXdZQlB0SW1VdTBmM0Nmd3gtMklQMUF3In0.eyJleHAiOjE3NDY3MDg4MzQsImlhdCI6MTc0NjcwODUzNCwiYXV0aF90aW1lIjoxNzQ2NzAwNjAxLCJqdGkiOiJkNzBiZGQwZS0wZmU5LTQzMTItOWUyZS0yZGY1N2I2MDAxYjQiLCJpc3MiOiJodHRwczovL2RlbW8uZGZxdC5vcmcvaWFtL3JlYWxtcy9nYWluIiwiYXVkIjpbImlzdGlvLWdhdGV3YXktdGxzLWNsaWVudCIsInJlYWxtLW1hbmFnZW1lbnQiLCJicm9rZXIiLCJhY2NvdW50Il0sInN1YiI6IjFlMTUyNDRlLTkwMGMtNDU0ZS04MTEwLWY1YzE4NDA3YjAxOCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImdhaW4tdXNlci1tYW5hZ2VtZW50Iiwibm9uY2UiOiIzNGFhMzNhYy00YWFkLTQ0NDMtOGNlZi1jYzExYTU3OTUyMTMiLCJzZXNzaW9uX3N0YXRlIjoiOTkzZTYxNjItM2MyNi00MjRkLThhNGMtN2VkNTBiMGQ4ZmI0IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2RlbW8uZGZxdC5vcmciXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJwYXJ0aWNpcGFudC1tYW5hZ2VyIiwiZGVmYXVsdC1yb2xlcy1nYWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsicmVhbG0tbWFuYWdlbWVudCI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsInJlYWxtLWFkbWluIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJicm9rZXIiOnsicm9sZXMiOlsicmVhZC10b2tlbiJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctYXBwbGljYXRpb25zIiwidmlldy1jb25zZW50Iiwidmlldy1ncm91cHMiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsIm1hbmFnZS1jb25zZW50IiwiZGVsZXRlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBvcmctcm9sZSBpc3Rpby1nYXRld2F5LXRscy1jbGllbnQtYXVkaWVuY2UgcHJvZmlsZSIsInNpZCI6Ijk5M2U2MTYyLTNjMjYtNDI0ZC04YTRjLTdlZDUwYjBkOGZiNCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IkFzc3VyZGx5IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXNzdXJkbHktcGFydGljaXBhbnQtbWdtdCIsImdpdmVuX25hbWUiOiJBc3N1cmRseSIsImZhbWlseV9uYW1lIjoiIiwiZW1haWwiOiJhc3N1cmRseS1wYXJ0aWNpcGFudC1tZ210QGV4YW1wbGUuY29tIn0.H27WuCKQiWI90ePT8BKNaj2vPwe1etYxRUPoLmW7nC3ydfvqb0pL7--GGKXVQ3tKuYlbun6tPzBtJd6y4Twg5N4F8-ZnLDr6uNn9JOkbduDKfceh570KYx79CjXK1ROa8dGWHZIqxP9E6tSa8HP-2Q1uOqT0IpGcNd4uNw8Efz_eNkmbkfIFD-wYJlTOTNfEGpjS1diLVof5aL2OQiSNZJJToxtch72N79jvNw597vK20Sg9fXYUPgo8JV8qT6nOZ5vPS0dkg0UkOvNubPvl_epqY62n6TbkdYOqkKgh3e4IENq9mB0b8vpiTQqSILom9bD0u9qWPlugBAViHa2YUA",
								"disabled": true
							},
							{
								"key": "content-type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "origin",
								"value": "https://demo.dfqt.org",
								"disabled": true
							},
							{
								"key": "priority",
								"value": "u=1, i",
								"disabled": true
							},
							{
								"key": "referer",
								"value": "https://demo.dfqt.org/user/participant/edit/R0xOOjQwNDE4NjUwMDAwMjE=/site-edit/R0xOOjQwNDE4NjUwMDAwMjE=",
								"disabled": true
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\"",
								"disabled": true
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0",
								"disabled": true
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\"",
								"disabled": true
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty",
								"disabled": true
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors",
								"disabled": true
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin",
								"disabled": true
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "_oauth2_proxy_0=qNZ5zbmxxyi8YPLXIC7YFIryS_uJJTBq6n9HNw2V2ou5F4BDcsHiEgz9FMUGHfgbA4fNng1Vx3lnlaznjDggNTHFLSSIoruomYNPDHUKrsNAanSa01dSk2kq4tNbAh91hg97j3L0ctXrG-fsjzNZMwzj5rphyCDWDFbnXO1QzZDki6lvA3lYeSpRO6__Tb04DONyANsSRTfHyWuvxrSYhd0yLaU-hogDCEW9MEfvmDestCYlrj3f0m-lGesDo1G-p2MrBUsQrqDCYz5-2YQYwn14WEMOKNpMQIrr6Af7YlkRuAjcTv4vEuUVD9U1PSVQUQDaGJ7gEZcqKnRHLFQF9WBaVrZRf_sqkrrK6NkfVpdOZ7pW2ZXMk2um4_lBf2rVJXawP9zWzb64-LJsYhJXJbGLvju9C5l1QlAI1ovxQsjmKcipKhCx9xxQII_bKdYF9jalhEdLEnLtHDYHw_gJD8KLVnV6IaWWPon9GGUvbwFJ5boCSXTjoGlIQkL5j70t9WE0sgJNCr7oeIfFTS2VxmGdbjoPeAP7bZqR85kmEHApIVCZtTy0xKJ5ECZLmipQev6Qe33eCJOby9xqOjFvDUb1kiVtfnj0hXS2FnYbCDKTbDnLZJv3m537sFH3oTvXZ2h8XCaimC8nCRmJT39CkUXoG7DeY96LzGsqm98oy0FgEyI8tmfdhvj5g1P4s6PQk28c8lqBsVPV-Pw-h0Z7KdvqvNxII6M1tRO0JXJn8oK_lUQYcV7WMVvyhPE6JZHI0xC3xnISgAwYPYMoQjTMA_AKj5aN4YYj976IuZ_84euouiSMZ9oyIdLcHXgRhtU7r0y2cMJ8CS62NNeI2AStVwfTY6CgD1gQCIFKwDsU2mPanvGdn6Y4skD6IERCp5wI1aW8btjEii_-pu00LnzPmasxnpTBh5GnVikd3Rk3gNYleydfP8YhZFk64WZ3mnBaA6fgJIWgWaFNWLHqVIYIop3NphiDXmqD6flHsJKBEU-N-IPggJe9UN_kO2a7xs-Q8FAEl8P4gfaQ6CJwNfyxzTK1JdHVLSnkTojguSywg21FZ-o2-QiD_cpPZCIVa2xyv_6JeKgdzo2zXOgsu040riaKMNALwnMzia5VSzxRRUCWSz9xiGZdlgCQdkKBU26qSDC1stcFBF8MNaAprRAo-HkOSGYYrBJGa5Pq_hyrfXyCBZMqZwZqSBOemHAWV94n-cAAYuwzKCNo65r8sHLeiBkc4Fdl_iHUT9wN7K5r6yTxkFi49id4Njo4GAKIWcfE2xIEGaaKJ3lKBXOIT4sY2-iFTpXnIC-88MqMfMNTD6dYV5mZTcvjnnxoF1244HB_WPCaoaSWx-UZ82NoOrjVrQvkic0AvGIQHHfwJwK0YfoAR3J0OGUBzlnJmALVZ_mRnYuLcwnsWPvxIUnB7DwctbH6ZXq6-1V5qN_E0Iuo-xVducgwSIZdUVtbFmKo3MlHwJMuS29A91YIngRhZtvUU8aUU6Rk9nOuXbfTC83yOXfluV8E34Gkl6vNHLgF_Z8hAD85CZhsD5CncJFI2IoZTt04AfkgD8H-pP0ZFIKEdCeFB-QNQfJn4-RFxW43J6czpWXJ3pekv3Nh0joLuhYtFS8I7lsPC7SxAcpZtLPtM1gH2DUCeUsW6qTz6OUmZvYt-DCJwpVZ5Tu-o2e6SfcbIc47kz9GwWqxAMdU330GK3YG_dOnGQf1KLFkkhIesJkukFZrcYuQxJaJtrp0Zdaw3wG6PrLpXqirUGZ_juokz3dBflRUz9T2ZvnQL7BH_Z3MHce6HnB5lT6Loh5nfXMxp0iypC481p_kcYrNiaeFd2heqinuQFlEEydd1ryu6i44vpQiF2wDsTD1uhyKU7HepQxsTrr-7hLiNboTNOjLnD5MSLAYRwNOg21jE1J75zoYjXStJWCfAHHxIuxoPAiqWph-laRkbCQzETaVXAsPoUPFLY05WVcAMr-eGZlBI1-6kTR4NEmu5K9kk23IIv3GN35xilB7MMzE7k7BQ31uRuKoJQwjRW2oubEY-dOdp1nYPsHJG0XhHSPGg-qdlVR1VHAyX-S_YtuliVQFQErI7_rzuCnw7JG5OpUCalKH6FPtAZV2NZ3gp4zdcELJlJDIDYT8cGmzdqtT4rZC5Pp1pOyn4_z0Xl5-9cAW2DM5TrtXXtaN6jHX6bVjFFF0ux_92_f9-p_9MI4Pok_yYiYSC-w_6oXRq2WnxiRzQrrSZQXv0c8-k1j5sc63D1zffAkA9IR_5_sdcWDCGN5whjVRQSwrAxNDaplbpR-feL9nRtXvifgN8YsVtVP_V_1BCbJb426o4_qhE_Uqt5rYP2zdjEBPtAQnd79qVr_MMVYQEfxwSUN8ZuGReSF6-DmBZpaJjSYZJUrkG8eMP_XiDejaJJvo0uiB3KPNGDXx9sEmHwsniPCqZICfctjWjYsEmFMLYGjR0szKJnTanopn4PCrfEDA4z6Kcq-i9BBpl_p_jxLAtdO1Yvp1_RQ8ekd8yR57hlxOEXf6M9M1eDmOD7lx3JPR-ZWNhT-_izdT7L-xAzwlC_RSuFP-jaBqAq56jviGeNhbDr_mI7LmzIhBXA7bZuEH0XyXgZRgtKOvfIbR3zbdtFhEg9-lcbq7YE8w4YIeWYAFFrl5ETwu36EjQuJNVR-mxh-Ii9UVLIOMrnVdnIk0H-l2ddac5_eoasDfIrDbJ5TyXOrcX3wgf6xONpHWQJHI-YsCrlJHEomedUx2mfBlHm-sfCnbszeQefxdVRY716g0Zc_ETMrD16Q5otH3WrctOimyCascLMC7GgFXMEUtC3kUif00qdx0TceSOPpxSnYHlPZx84Q03GaTNAJ3ieXcd14pAJ0qvhlTMwRA3EQyZZJff7Ixk61j5SlEIj19dNWIlpV9fbx4HItw7Utjsc4-g6sC-m4cI7rL3dUqFuSMLeMlLUBm5AGlfvRCP5-HewhisEpWHWme3pmZUEd8YHZfidBjui2Tb2V-PzA5wc_TE4O6bk3kCFtBrywblkqc3fPVsCYbiLv-RnC7MThdw-W56FDjxsIAcrjLUUZLTL3m-nW0iVGY20eIhFy3qAhhk2GYOiRysYW0lcqh-Ws_VyETRlnRlC-yyILyworMZE2s8ddBrrlaxk7dMxbxEbKdQDUIbVlfc9Hz_no2GSQ5Pl0WVD7QL416cHvRIWExaSa89Anaf8ZXPJgLexTDTVb36lKZbtksIxlqEIRko_KTHOqfkXzU6pvwYr0ZPTnuNdw_JhVFFx5-4vRbULazfHwniblQkB4E1syotYdBm8eue-0P0E_bdfoAJ5AHonNVL_jgWg7b0nWjdiwgBi66UZgq-UpHL7OHESSnjCaJz6L-kMDzcjwOfHl3MayQfz7HtPTtOayXT4uPumUuvATFF5iP614N2S0M0Bc8WKpurjcwDR4Ku_7sURA7WrmvZaf3ze4YVpBqraSre5IlRQfxyV5xBxlFww0bVVuHz7TBcmi17OvrvFWpwOkQE6MIUJQBq6Mr2gFv7OrPmAeUzcO-kcsM2HyaIYODx0IjB3Ix4TuqXEjZPeu27dADK1DnASnx3KoedVLwv9jVj_W0mikNmdnDBgHjkuhOH2ey_BhtTwmVAmMs5W_2wt7cVQAhNbJ_US6qtcSGFNkRdlUWWgw6W-rHQphwkSZ7hfAMDxeJ-RkJ6gULEfZUzaYqRM34Y6-pvUL2b01U8tkdJ_pJn6zycaYPAn_1lvz3dminoZWZv8oHA9BfqdWD4K6TZi4O1eSC8vwph8bvA-7Am-h0frNem3lPunSQCQ7bc8dEKCsXbN9ZfMVJgl3DejduD9yWM0nDgfwRbftynem6WpdbgRMtveMMuQBwk_a6Ml42CfucfOofCxQgR_sz9vW3oLeqs; _oauth2_proxy_1=LWPtAT_obdWRfW9HVnNJy9E1mI4PF8MNJ1W5ZHqMC70SUhIyN2Efx70bEfQvK4R_6CQIsujYj2XzWEy81F2UTNIibgIOu25mZgLUscu9F2UkTYoC3R-Bd-2Y9Jdb7fGk8lNzLFeOj8OVZESf2jxqcjxuE97CICUYILZVfXyreqJ1Glrb3L4zagp8DOEnbWzz03bJNhDKN_Rr9T7MBLbaIiSS96fmTeMpAUKqVQZxSpXcgavdcvvScsLtmTrJDtV07UQwq6TffSKdqJ89ce7VIjC0nSUdaiaDH8DXpEb8WNohkYLp1wsdzavSA8JSiSxwv7AKiGjqyVGnbSP3k1jzTiaBbeGakNjDqejjgCbCx7Mk1RrUcOHNaZTY4avW5UsssRr-hlatd6tmQgf8zXD3-N57UFYYtS_Wq4FfOnTrDwW2nk4wrsMB9dtDuOJO3RYYQaxiRExOJb9T3G1BhvUnnO3hkNJVT3Bz_AU2Q0-kqcb0rNPr2o3NasTcXvIBq6s1YYeUduFD8v1Cde4EDDE_jS4gwR3KAuo8HDwc_HHSm5LIl_l8BPWwr6zSlD574GTYaCK1nkJbDNs9B5FVviROcuHrEXyJ_qpPmQhRjUW5FuPMkh224unkSweqZdLLNXabI9rKUnuKMy89Ssqea-rpV-lU3zGa2i7gkWj_-P3VN9A_K3U_0-dioLw7RKbewXwFU-yGFUKXATmdUSNCmsLAc5eEP4uLuH2v5AJOGUF7A8-NCAd3zMawAJYbTQKDYlO_qM4pB-fb2SdRnqf2eLAtO2GpiUo99nNxhqRbpbL65JQVyS_sYzUfjKBvwfjVRh2c_ufZa9lxOOB0d5aBXPtdtjjYJM44Lxr-3QFwsWfd9vIXbEdzfs0LqlVpbuqFZKk4XCdaO8H7IBuVVq1B0yl473SM5uh1kz3xziObvo72dnS0TqETQzstT0wTwwjIgI_4-HhvVkQUcrjQ1_jKYrNsdpaTxqR1YveP12htfUH9rVj0VZLy5bI9PR-S2S5hnfAdHjVctvrH_G4foIxZCU4dt4j-EChMwYkS4kbxgk1-oUK9kfOccHBFJOfSeX_TdKx2X0h5RFIikko1ABonhveqmFrBfW0X_Hv89quR89CejSAWPgEF-E7GuWpGIJDvfXiV_NIK1wrC4c47PbvNN4QPa84lktspHrWHQRmNVdFCfFvnTEy69-jbQnQG0ga7eypRXaNhY3ce1zyuB-qVIqFXToRNiOjhPlQ6b0VhXATotdez1jhWXxeXBDUOiw68j4--W_VZD4KLVuVguYDnu5gaTCQQbEJLA==|1746485719|5v4PVWoBj72abMBtQVLnntRaurVy4SJniROwTnhg5o4=; _dd_s=logs=1&id=5e37b0d5-6e26-4ce7-9284-739c44c179d6&created=1746708525674&expire=1746709440208",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"site_name\": \"The site name for test\",\n    \"site_address\": \"Magodo bus stop\",\n    \"site_city\": \"Lagos\",\n    \"site_country\": \"Nigeria\",\n    \"site_state\": \"Lagos State\",\n    \"site_zipcode\": \"100001\",\n    \"location\": \"GLN:4041865000021\",\n    \"participant\": \"GLN:4041865000021\",\n    \"coordinates\": {\n        \"latitude\": \"37.774\",\n        \"longitude\": {{$randomLongitude}}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demo.dfqt.org/participant-api/participant/update-site",
							"protocol": "https",
							"host": [
								"demo",
								"dfqt",
								"org"
							],
							"path": [
								"participant-api",
								"participant",
								"update-site"
							]
						},
						"description": "Used to update the Site Details"
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"location\": \"<string>\",\n  \"participant\": \"<string>\",\n  \"site_address\": \"<string>\",\n  \"site_city\": \"<string>\",\n  \"site_country\": \"<string>\",\n  \"site_name\": \"<string>\",\n  \"site_state\": \"<string>\",\n  \"site_zipcode\": \"<string>\",\n  \"coordinates\": {\n    \"latitude\": \"<number>\",\n    \"longitude\": \"<number>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/update-site",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"update-site"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		},
		{
			"name": "Add Site",
			"item": [
				{
					"name": "Add New Site Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    const res = pm.response.json();",
									"",
									"    pm.expect(res).to.have.property(\"success\", true);",
									"    pm.expect(res).to.have.property(\"data\").that.is.an(\"array\").that.is.empty;",
									"    pm.expect(res).to.have.property(\"details\").that.is.an(\"object\");",
									"    pm.expect(res.details).to.have.property(\"message\", \"Site details added successfully\");",
									"    pm.expect(res.details).to.have.property(\"detail\", \"\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en,en-US;q=0.9"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJDVlZXbDZDcF9TcE44LXJaZFl3OXdZQlB0SW1VdTBmM0Nmd3gtMklQMUF3In0.eyJleHAiOjE3NDY3MTEwODMsImlhdCI6MTc0NjcxMDc4MywiYXV0aF90aW1lIjoxNzQ2NzAwNjAxLCJqdGkiOiI2Yjc1ZTJmMy1hNmI5LTRiYzItOWZiNC00NjExZDEzMzRlMTQiLCJpc3MiOiJodHRwczovL2RlbW8uZGZxdC5vcmcvaWFtL3JlYWxtcy9nYWluIiwiYXVkIjpbImlzdGlvLWdhdGV3YXktdGxzLWNsaWVudCIsInJlYWxtLW1hbmFnZW1lbnQiLCJicm9rZXIiLCJhY2NvdW50Il0sInN1YiI6IjFlMTUyNDRlLTkwMGMtNDU0ZS04MTEwLWY1YzE4NDA3YjAxOCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImdhaW4tdXNlci1tYW5hZ2VtZW50Iiwibm9uY2UiOiIzNGFhMzNhYy00YWFkLTQ0NDMtOGNlZi1jYzExYTU3OTUyMTMiLCJzZXNzaW9uX3N0YXRlIjoiOTkzZTYxNjItM2MyNi00MjRkLThhNGMtN2VkNTBiMGQ4ZmI0IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2RlbW8uZGZxdC5vcmciXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJwYXJ0aWNpcGFudC1tYW5hZ2VyIiwiZGVmYXVsdC1yb2xlcy1nYWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsicmVhbG0tbWFuYWdlbWVudCI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsInJlYWxtLWFkbWluIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJicm9rZXIiOnsicm9sZXMiOlsicmVhZC10b2tlbiJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctYXBwbGljYXRpb25zIiwidmlldy1jb25zZW50Iiwidmlldy1ncm91cHMiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsIm1hbmFnZS1jb25zZW50IiwiZGVsZXRlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBvcmctcm9sZSBpc3Rpby1nYXRld2F5LXRscy1jbGllbnQtYXVkaWVuY2UgcHJvZmlsZSIsInNpZCI6Ijk5M2U2MTYyLTNjMjYtNDI0ZC04YTRjLTdlZDUwYjBkOGZiNCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IkFzc3VyZGx5IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXNzdXJkbHktcGFydGljaXBhbnQtbWdtdCIsImdpdmVuX25hbWUiOiJBc3N1cmRseSIsImZhbWlseV9uYW1lIjoiIiwiZW1haWwiOiJhc3N1cmRseS1wYXJ0aWNpcGFudC1tZ210QGV4YW1wbGUuY29tIn0.AxNR61SUrJyo0xXfUAZArTFxGyBW4NjdXdLrLHaVoDy9KJHpOSkrJhQ9oTVb2zbKLJqivgz486sVpv_UXcFc2YUURs2ppf4qENcUEYGWn1Fm371h2CmxNN39x5pCymY_jIydZj5E5LttT6Lm5l9Napk-5fGX2JCjBMbo_Dp4bNtwIQPe3uad01LVSDcLtqHvVTVMr8kr-veWvEsCOU2D9QCcPC-T4hc1bSXAH94SJyoEPPqu_uEF0Z9OMRbakRGpjWiAqGAur2TmHS-mCP7eug5wc1BlmFbM0msCPWHlym8sY2e_KJqIpOcTRwmZK4WUgEM9r36lfgjXN65sNu6QhA",
								"disabled": true
							},
							{
								"key": "content-type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "origin",
								"value": "https://demo.dfqt.org",
								"disabled": true
							},
							{
								"key": "priority",
								"value": "u=1, i",
								"disabled": true
							},
							{
								"key": "referer",
								"value": "https://demo.dfqt.org/user/participant/edit/R0xOOjQwNDE4NjUwMDAwMjE=/site-add",
								"disabled": true
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\"",
								"disabled": true
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0",
								"disabled": true
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\"",
								"disabled": true
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty",
								"disabled": true
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors",
								"disabled": true
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin",
								"disabled": true
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "_oauth2_proxy_0=qNZ5zbmxxyi8YPLXIC7YFIryS_uJJTBq6n9HNw2V2ou5F4BDcsHiEgz9FMUGHfgbA4fNng1Vx3lnlaznjDggNTHFLSSIoruomYNPDHUKrsNAanSa01dSk2kq4tNbAh91hg97j3L0ctXrG-fsjzNZMwzj5rphyCDWDFbnXO1QzZDki6lvA3lYeSpRO6__Tb04DONyANsSRTfHyWuvxrSYhd0yLaU-hogDCEW9MEfvmDestCYlrj3f0m-lGesDo1G-p2MrBUsQrqDCYz5-2YQYwn14WEMOKNpMQIrr6Af7YlkRuAjcTv4vEuUVD9U1PSVQUQDaGJ7gEZcqKnRHLFQF9WBaVrZRf_sqkrrK6NkfVpdOZ7pW2ZXMk2um4_lBf2rVJXawP9zWzb64-LJsYhJXJbGLvju9C5l1QlAI1ovxQsjmKcipKhCx9xxQII_bKdYF9jalhEdLEnLtHDYHw_gJD8KLVnV6IaWWPon9GGUvbwFJ5boCSXTjoGlIQkL5j70t9WE0sgJNCr7oeIfFTS2VxmGdbjoPeAP7bZqR85kmEHApIVCZtTy0xKJ5ECZLmipQev6Qe33eCJOby9xqOjFvDUb1kiVtfnj0hXS2FnYbCDKTbDnLZJv3m537sFH3oTvXZ2h8XCaimC8nCRmJT39CkUXoG7DeY96LzGsqm98oy0FgEyI8tmfdhvj5g1P4s6PQk28c8lqBsVPV-Pw-h0Z7KdvqvNxII6M1tRO0JXJn8oK_lUQYcV7WMVvyhPE6JZHI0xC3xnISgAwYPYMoQjTMA_AKj5aN4YYj976IuZ_84euouiSMZ9oyIdLcHXgRhtU7r0y2cMJ8CS62NNeI2AStVwfTY6CgD1gQCIFKwDsU2mPanvGdn6Y4skD6IERCp5wI1aW8btjEii_-pu00LnzPmasxnpTBh5GnVikd3Rk3gNYleydfP8YhZFk64WZ3mnBaA6fgJIWgWaFNWLHqVIYIop3NphiDXmqD6flHsJKBEU-N-IPggJe9UN_kO2a7xs-Q8FAEl8P4gfaQ6CJwNfyxzTK1JdHVLSnkTojguSywg21FZ-o2-QiD_cpPZCIVa2xyv_6JeKgdzo2zXOgsu040riaKMNALwnMzia5VSzxRRUCWSz9xiGZdlgCQdkKBU26qSDC1stcFBF8MNaAprRAo-HkOSGYYrBJGa5Pq_hyrfXyCBZMqZwZqSBOemHAWV94n-cAAYuwzKCNo65r8sHLeiBkc4Fdl_iHUT9wN7K5r6yTxkFi49id4Njo4GAKIWcfE2xIEGaaKJ3lKBXOIT4sY2-iFTpXnIC-88MqMfMNTD6dYV5mZTcvjnnxoF1244HB_WPCaoaSWx-UZ82NoOrjVrQvkic0AvGIQHHfwJwK0YfoAR3J0OGUBzlnJmALVZ_mRnYuLcwnsWPvxIUnB7DwctbH6ZXq6-1V5qN_E0Iuo-xVducgwSIZdUVtbFmKo3MlHwJMuS29A91YIngRhZtvUU8aUU6Rk9nOuXbfTC83yOXfluV8E34Gkl6vNHLgF_Z8hAD85CZhsD5CncJFI2IoZTt04AfkgD8H-pP0ZFIKEdCeFB-QNQfJn4-RFxW43J6czpWXJ3pekv3Nh0joLuhYtFS8I7lsPC7SxAcpZtLPtM1gH2DUCeUsW6qTz6OUmZvYt-DCJwpVZ5Tu-o2e6SfcbIc47kz9GwWqxAMdU330GK3YG_dOnGQf1KLFkkhIesJkukFZrcYuQxJaJtrp0Zdaw3wG6PrLpXqirUGZ_juokz3dBflRUz9T2ZvnQL7BH_Z3MHce6HnB5lT6Loh5nfXMxp0iypC481p_kcYrNiaeFd2heqinuQFlEEydd1ryu6i44vpQiF2wDsTD1uhyKU7HepQxsTrr-7hLiNboTNOjLnD5MSLAYRwNOg21jE1J75zoYjXStJWCfAHHxIuxoPAiqWph-laRkbCQzETaVXAsPoUPFLY05WVcAMr-eGZlBI1-6kTR4NEmu5K9kk23IIv3GN35xilB7MMzE7k7BQ31uRuKoJQwjRW2oubEY-dOdp1nYPsHJG0XhHSPGg-qdlVR1VHAyX-S_YtuliVQFQErI7_rzuCnw7JG5OpUCalKH6FPtAZV2NZ3gp4zdcELJlJDIDYT8cGmzdqtT4rZC5Pp1pOyn4_z0Xl5-9cAW2DM5TrtXXtaN6jHX6bVjFFF0ux_92_f9-p_9MI4Pok_yYiYSC-w_6oXRq2WnxiRzQrrSZQXv0c8-k1j5sc63D1zffAkA9IR_5_sdcWDCGN5whjVRQSwrAxNDaplbpR-feL9nRtXvifgN8YsVtVP_V_1BCbJb426o4_qhE_Uqt5rYP2zdjEBPtAQnd79qVr_MMVYQEfxwSUN8ZuGReSF6-DmBZpaJjSYZJUrkG8eMP_XiDejaJJvo0uiB3KPNGDXx9sEmHwsniPCqZICfctjWjYsEmFMLYGjR0szKJnTanopn4PCrfEDA4z6Kcq-i9BBpl_p_jxLAtdO1Yvp1_RQ8ekd8yR57hlxOEXf6M9M1eDmOD7lx3JPR-ZWNhT-_izdT7L-xAzwlC_RSuFP-jaBqAq56jviGeNhbDr_mI7LmzIhBXA7bZuEH0XyXgZRgtKOvfIbR3zbdtFhEg9-lcbq7YE8w4YIeWYAFFrl5ETwu36EjQuJNVR-mxh-Ii9UVLIOMrnVdnIk0H-l2ddac5_eoasDfIrDbJ5TyXOrcX3wgf6xONpHWQJHI-YsCrlJHEomedUx2mfBlHm-sfCnbszeQefxdVRY716g0Zc_ETMrD16Q5otH3WrctOimyCascLMC7GgFXMEUtC3kUif00qdx0TceSOPpxSnYHlPZx84Q03GaTNAJ3ieXcd14pAJ0qvhlTMwRA3EQyZZJff7Ixk61j5SlEIj19dNWIlpV9fbx4HItw7Utjsc4-g6sC-m4cI7rL3dUqFuSMLeMlLUBm5AGlfvRCP5-HewhisEpWHWme3pmZUEd8YHZfidBjui2Tb2V-PzA5wc_TE4O6bk3kCFtBrywblkqc3fPVsCYbiLv-RnC7MThdw-W56FDjxsIAcrjLUUZLTL3m-nW0iVGY20eIhFy3qAhhk2GYOiRysYW0lcqh-Ws_VyETRlnRlC-yyILyworMZE2s8ddBrrlaxk7dMxbxEbKdQDUIbVlfc9Hz_no2GSQ5Pl0WVD7QL416cHvRIWExaSa89Anaf8ZXPJgLexTDTVb36lKZbtksIxlqEIRko_KTHOqfkXzU6pvwYr0ZPTnuNdw_JhVFFx5-4vRbULazfHwniblQkB4E1syotYdBm8eue-0P0E_bdfoAJ5AHonNVL_jgWg7b0nWjdiwgBi66UZgq-UpHL7OHESSnjCaJz6L-kMDzcjwOfHl3MayQfz7HtPTtOayXT4uPumUuvATFF5iP614N2S0M0Bc8WKpurjcwDR4Ku_7sURA7WrmvZaf3ze4YVpBqraSre5IlRQfxyV5xBxlFww0bVVuHz7TBcmi17OvrvFWpwOkQE6MIUJQBq6Mr2gFv7OrPmAeUzcO-kcsM2HyaIYODx0IjB3Ix4TuqXEjZPeu27dADK1DnASnx3KoedVLwv9jVj_W0mikNmdnDBgHjkuhOH2ey_BhtTwmVAmMs5W_2wt7cVQAhNbJ_US6qtcSGFNkRdlUWWgw6W-rHQphwkSZ7hfAMDxeJ-RkJ6gULEfZUzaYqRM34Y6-pvUL2b01U8tkdJ_pJn6zycaYPAn_1lvz3dminoZWZv8oHA9BfqdWD4K6TZi4O1eSC8vwph8bvA-7Am-h0frNem3lPunSQCQ7bc8dEKCsXbN9ZfMVJgl3DejduD9yWM0nDgfwRbftynem6WpdbgRMtveMMuQBwk_a6Ml42CfucfOofCxQgR_sz9vW3oLeqs; _oauth2_proxy_1=LWPtAT_obdWRfW9HVnNJy9E1mI4PF8MNJ1W5ZHqMC70SUhIyN2Efx70bEfQvK4R_6CQIsujYj2XzWEy81F2UTNIibgIOu25mZgLUscu9F2UkTYoC3R-Bd-2Y9Jdb7fGk8lNzLFeOj8OVZESf2jxqcjxuE97CICUYILZVfXyreqJ1Glrb3L4zagp8DOEnbWzz03bJNhDKN_Rr9T7MBLbaIiSS96fmTeMpAUKqVQZxSpXcgavdcvvScsLtmTrJDtV07UQwq6TffSKdqJ89ce7VIjC0nSUdaiaDH8DXpEb8WNohkYLp1wsdzavSA8JSiSxwv7AKiGjqyVGnbSP3k1jzTiaBbeGakNjDqejjgCbCx7Mk1RrUcOHNaZTY4avW5UsssRr-hlatd6tmQgf8zXD3-N57UFYYtS_Wq4FfOnTrDwW2nk4wrsMB9dtDuOJO3RYYQaxiRExOJb9T3G1BhvUnnO3hkNJVT3Bz_AU2Q0-kqcb0rNPr2o3NasTcXvIBq6s1YYeUduFD8v1Cde4EDDE_jS4gwR3KAuo8HDwc_HHSm5LIl_l8BPWwr6zSlD574GTYaCK1nkJbDNs9B5FVviROcuHrEXyJ_qpPmQhRjUW5FuPMkh224unkSweqZdLLNXabI9rKUnuKMy89Ssqea-rpV-lU3zGa2i7gkWj_-P3VN9A_K3U_0-dioLw7RKbewXwFU-yGFUKXATmdUSNCmsLAc5eEP4uLuH2v5AJOGUF7A8-NCAd3zMawAJYbTQKDYlO_qM4pB-fb2SdRnqf2eLAtO2GpiUo99nNxhqRbpbL65JQVyS_sYzUfjKBvwfjVRh2c_ufZa9lxOOB0d5aBXPtdtjjYJM44Lxr-3QFwsWfd9vIXbEdzfs0LqlVpbuqFZKk4XCdaO8H7IBuVVq1B0yl473SM5uh1kz3xziObvo72dnS0TqETQzstT0wTwwjIgI_4-HhvVkQUcrjQ1_jKYrNsdpaTxqR1YveP12htfUH9rVj0VZLy5bI9PR-S2S5hnfAdHjVctvrH_G4foIxZCU4dt4j-EChMwYkS4kbxgk1-oUK9kfOccHBFJOfSeX_TdKx2X0h5RFIikko1ABonhveqmFrBfW0X_Hv89quR89CejSAWPgEF-E7GuWpGIJDvfXiV_NIK1wrC4c47PbvNN4QPa84lktspHrWHQRmNVdFCfFvnTEy69-jbQnQG0ga7eypRXaNhY3ce1zyuB-qVIqFXToRNiOjhPlQ6b0VhXATotdez1jhWXxeXBDUOiw68j4--W_VZD4KLVuVguYDnu5gaTCQQbEJLA==|1746485719|5v4PVWoBj72abMBtQVLnntRaurVy4SJniROwTnhg5o4=; _dd_s=logs=1&id=5e37b0d5-6e26-4ce7-9284-739c44c179d6&created=1746708525674&expire=1746711719326",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"site_name\": \"{{randomname}}\",\n    \"site_address\": \"{{$randomStreetAddress}}\",\n    \"site_city\": \"Lagos\",\n    \"site_country\": \"Nigeria\",\n    \"site_state\": \"Lagos State\",\n    \"site_zipcode\": \"100001\",\n    \"location\": \"GLN:5444444444444\",\n    \"participant\": \"GLN:4041865000021\",\n    \"coordinates\": {\n        \"latitude\": \"{{$randomLatitude}}\",\n        \"longitude\": \"{{$randomLongitude}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demo.dfqt.org/participant-api/participant/add-site",
							"protocol": "https",
							"host": [
								"demo",
								"dfqt",
								"org"
							],
							"path": [
								"participant-api",
								"participant",
								"add-site"
							]
						},
						"description": "Used to add new site"
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"location\": \"<string>\",\n  \"participant\": \"<string>\",\n  \"site_address\": \"<string>\",\n  \"site_city\": \"<string>\",\n  \"site_country\": \"<string>\",\n  \"site_name\": \"<string>\",\n  \"site_state\": \"<string>\",\n  \"site_zipcode\": \"<string>\",\n  \"coordinates\": {\n    \"latitude\": \"<number>\",\n    \"longitude\": \"<number>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/add-site",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"add-site"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		},
		{
			"name": "Add Participant",
			"item": [
				{
					"name": "Add New Participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is successful\", function () {",
									"    const res = pm.response.json();",
									"    pm.expect(res.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Correct success message\", function () {",
									"    const res = pm.response.json();",
									"    pm.expect(res.details.message).to.eql(\"Participant added successfully\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en,en-US;q=0.9"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJDVlZXbDZDcF9TcE44LXJaZFl3OXdZQlB0SW1VdTBmM0Nmd3gtMklQMUF3In0.eyJleHAiOjE3NDY3MTE2MzAsImlhdCI6MTc0NjcxMTMzMCwiYXV0aF90aW1lIjoxNzQ2NzAwNjAxLCJqdGkiOiJhYjU3M2RlYi0wZDNhLTQ5YTAtOWJlMC1kZTRjMmQ1Njk3YzkiLCJpc3MiOiJodHRwczovL2RlbW8uZGZxdC5vcmcvaWFtL3JlYWxtcy9nYWluIiwiYXVkIjpbImlzdGlvLWdhdGV3YXktdGxzLWNsaWVudCIsInJlYWxtLW1hbmFnZW1lbnQiLCJicm9rZXIiLCJhY2NvdW50Il0sInN1YiI6IjFlMTUyNDRlLTkwMGMtNDU0ZS04MTEwLWY1YzE4NDA3YjAxOCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImdhaW4tdXNlci1tYW5hZ2VtZW50Iiwibm9uY2UiOiIzNGFhMzNhYy00YWFkLTQ0NDMtOGNlZi1jYzExYTU3OTUyMTMiLCJzZXNzaW9uX3N0YXRlIjoiOTkzZTYxNjItM2MyNi00MjRkLThhNGMtN2VkNTBiMGQ4ZmI0IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2RlbW8uZGZxdC5vcmciXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJwYXJ0aWNpcGFudC1tYW5hZ2VyIiwiZGVmYXVsdC1yb2xlcy1nYWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsicmVhbG0tbWFuYWdlbWVudCI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsInJlYWxtLWFkbWluIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJicm9rZXIiOnsicm9sZXMiOlsicmVhZC10b2tlbiJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctYXBwbGljYXRpb25zIiwidmlldy1jb25zZW50Iiwidmlldy1ncm91cHMiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsIm1hbmFnZS1jb25zZW50IiwiZGVsZXRlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBvcmctcm9sZSBpc3Rpby1nYXRld2F5LXRscy1jbGllbnQtYXVkaWVuY2UgcHJvZmlsZSIsInNpZCI6Ijk5M2U2MTYyLTNjMjYtNDI0ZC04YTRjLTdlZDUwYjBkOGZiNCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IkFzc3VyZGx5IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXNzdXJkbHktcGFydGljaXBhbnQtbWdtdCIsImdpdmVuX25hbWUiOiJBc3N1cmRseSIsImZhbWlseV9uYW1lIjoiIiwiZW1haWwiOiJhc3N1cmRseS1wYXJ0aWNpcGFudC1tZ210QGV4YW1wbGUuY29tIn0.DAaA6HUU2lUOVIHTnMAYM_K0RVEOtIHSDEQCksiVlZVSZDJTA0c6Mfmn64ONQv6ppPBpjXqCprBoEg1XV_adYjHREs2bvPOg1krK_XEX-Pe4Z3mur_KB2oCYxmHBasei0QjmEdHVJ0S2esJiXlCV7styY6yDOJ9PMTDic6uiQTCUxAO8hwI6IDqFobzuy-uHBks9rzWA54RZhLe3S_UYm01-HYaMxtaPygWkq03Z-DprV8XOHEDnwUNOJfBSwDFTxkB3uHI2nzOp9NYqMZZqsI_WcJTEGhak7K9Mkdw28EG9ONkFMip3HUhQpd6Ydv0hqKPqYCehfJhX-n2RC0Ih2g",
								"disabled": true
							},
							{
								"key": "content-type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "origin",
								"value": "https://demo.dfqt.org",
								"disabled": true
							},
							{
								"key": "priority",
								"value": "u=1, i",
								"disabled": true
							},
							{
								"key": "referer",
								"value": "https://demo.dfqt.org/user/participant/add/",
								"disabled": true
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\"",
								"disabled": true
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0",
								"disabled": true
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\"",
								"disabled": true
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty",
								"disabled": true
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors",
								"disabled": true
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin",
								"disabled": true
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "_oauth2_proxy_0=qNZ5zbmxxyi8YPLXIC7YFIryS_uJJTBq6n9HNw2V2ou5F4BDcsHiEgz9FMUGHfgbA4fNng1Vx3lnlaznjDggNTHFLSSIoruomYNPDHUKrsNAanSa01dSk2kq4tNbAh91hg97j3L0ctXrG-fsjzNZMwzj5rphyCDWDFbnXO1QzZDki6lvA3lYeSpRO6__Tb04DONyANsSRTfHyWuvxrSYhd0yLaU-hogDCEW9MEfvmDestCYlrj3f0m-lGesDo1G-p2MrBUsQrqDCYz5-2YQYwn14WEMOKNpMQIrr6Af7YlkRuAjcTv4vEuUVD9U1PSVQUQDaGJ7gEZcqKnRHLFQF9WBaVrZRf_sqkrrK6NkfVpdOZ7pW2ZXMk2um4_lBf2rVJXawP9zWzb64-LJsYhJXJbGLvju9C5l1QlAI1ovxQsjmKcipKhCx9xxQII_bKdYF9jalhEdLEnLtHDYHw_gJD8KLVnV6IaWWPon9GGUvbwFJ5boCSXTjoGlIQkL5j70t9WE0sgJNCr7oeIfFTS2VxmGdbjoPeAP7bZqR85kmEHApIVCZtTy0xKJ5ECZLmipQev6Qe33eCJOby9xqOjFvDUb1kiVtfnj0hXS2FnYbCDKTbDnLZJv3m537sFH3oTvXZ2h8XCaimC8nCRmJT39CkUXoG7DeY96LzGsqm98oy0FgEyI8tmfdhvj5g1P4s6PQk28c8lqBsVPV-Pw-h0Z7KdvqvNxII6M1tRO0JXJn8oK_lUQYcV7WMVvyhPE6JZHI0xC3xnISgAwYPYMoQjTMA_AKj5aN4YYj976IuZ_84euouiSMZ9oyIdLcHXgRhtU7r0y2cMJ8CS62NNeI2AStVwfTY6CgD1gQCIFKwDsU2mPanvGdn6Y4skD6IERCp5wI1aW8btjEii_-pu00LnzPmasxnpTBh5GnVikd3Rk3gNYleydfP8YhZFk64WZ3mnBaA6fgJIWgWaFNWLHqVIYIop3NphiDXmqD6flHsJKBEU-N-IPggJe9UN_kO2a7xs-Q8FAEl8P4gfaQ6CJwNfyxzTK1JdHVLSnkTojguSywg21FZ-o2-QiD_cpPZCIVa2xyv_6JeKgdzo2zXOgsu040riaKMNALwnMzia5VSzxRRUCWSz9xiGZdlgCQdkKBU26qSDC1stcFBF8MNaAprRAo-HkOSGYYrBJGa5Pq_hyrfXyCBZMqZwZqSBOemHAWV94n-cAAYuwzKCNo65r8sHLeiBkc4Fdl_iHUT9wN7K5r6yTxkFi49id4Njo4GAKIWcfE2xIEGaaKJ3lKBXOIT4sY2-iFTpXnIC-88MqMfMNTD6dYV5mZTcvjnnxoF1244HB_WPCaoaSWx-UZ82NoOrjVrQvkic0AvGIQHHfwJwK0YfoAR3J0OGUBzlnJmALVZ_mRnYuLcwnsWPvxIUnB7DwctbH6ZXq6-1V5qN_E0Iuo-xVducgwSIZdUVtbFmKo3MlHwJMuS29A91YIngRhZtvUU8aUU6Rk9nOuXbfTC83yOXfluV8E34Gkl6vNHLgF_Z8hAD85CZhsD5CncJFI2IoZTt04AfkgD8H-pP0ZFIKEdCeFB-QNQfJn4-RFxW43J6czpWXJ3pekv3Nh0joLuhYtFS8I7lsPC7SxAcpZtLPtM1gH2DUCeUsW6qTz6OUmZvYt-DCJwpVZ5Tu-o2e6SfcbIc47kz9GwWqxAMdU330GK3YG_dOnGQf1KLFkkhIesJkukFZrcYuQxJaJtrp0Zdaw3wG6PrLpXqirUGZ_juokz3dBflRUz9T2ZvnQL7BH_Z3MHce6HnB5lT6Loh5nfXMxp0iypC481p_kcYrNiaeFd2heqinuQFlEEydd1ryu6i44vpQiF2wDsTD1uhyKU7HepQxsTrr-7hLiNboTNOjLnD5MSLAYRwNOg21jE1J75zoYjXStJWCfAHHxIuxoPAiqWph-laRkbCQzETaVXAsPoUPFLY05WVcAMr-eGZlBI1-6kTR4NEmu5K9kk23IIv3GN35xilB7MMzE7k7BQ31uRuKoJQwjRW2oubEY-dOdp1nYPsHJG0XhHSPGg-qdlVR1VHAyX-S_YtuliVQFQErI7_rzuCnw7JG5OpUCalKH6FPtAZV2NZ3gp4zdcELJlJDIDYT8cGmzdqtT4rZC5Pp1pOyn4_z0Xl5-9cAW2DM5TrtXXtaN6jHX6bVjFFF0ux_92_f9-p_9MI4Pok_yYiYSC-w_6oXRq2WnxiRzQrrSZQXv0c8-k1j5sc63D1zffAkA9IR_5_sdcWDCGN5whjVRQSwrAxNDaplbpR-feL9nRtXvifgN8YsVtVP_V_1BCbJb426o4_qhE_Uqt5rYP2zdjEBPtAQnd79qVr_MMVYQEfxwSUN8ZuGReSF6-DmBZpaJjSYZJUrkG8eMP_XiDejaJJvo0uiB3KPNGDXx9sEmHwsniPCqZICfctjWjYsEmFMLYGjR0szKJnTanopn4PCrfEDA4z6Kcq-i9BBpl_p_jxLAtdO1Yvp1_RQ8ekd8yR57hlxOEXf6M9M1eDmOD7lx3JPR-ZWNhT-_izdT7L-xAzwlC_RSuFP-jaBqAq56jviGeNhbDr_mI7LmzIhBXA7bZuEH0XyXgZRgtKOvfIbR3zbdtFhEg9-lcbq7YE8w4YIeWYAFFrl5ETwu36EjQuJNVR-mxh-Ii9UVLIOMrnVdnIk0H-l2ddac5_eoasDfIrDbJ5TyXOrcX3wgf6xONpHWQJHI-YsCrlJHEomedUx2mfBlHm-sfCnbszeQefxdVRY716g0Zc_ETMrD16Q5otH3WrctOimyCascLMC7GgFXMEUtC3kUif00qdx0TceSOPpxSnYHlPZx84Q03GaTNAJ3ieXcd14pAJ0qvhlTMwRA3EQyZZJff7Ixk61j5SlEIj19dNWIlpV9fbx4HItw7Utjsc4-g6sC-m4cI7rL3dUqFuSMLeMlLUBm5AGlfvRCP5-HewhisEpWHWme3pmZUEd8YHZfidBjui2Tb2V-PzA5wc_TE4O6bk3kCFtBrywblkqc3fPVsCYbiLv-RnC7MThdw-W56FDjxsIAcrjLUUZLTL3m-nW0iVGY20eIhFy3qAhhk2GYOiRysYW0lcqh-Ws_VyETRlnRlC-yyILyworMZE2s8ddBrrlaxk7dMxbxEbKdQDUIbVlfc9Hz_no2GSQ5Pl0WVD7QL416cHvRIWExaSa89Anaf8ZXPJgLexTDTVb36lKZbtksIxlqEIRko_KTHOqfkXzU6pvwYr0ZPTnuNdw_JhVFFx5-4vRbULazfHwniblQkB4E1syotYdBm8eue-0P0E_bdfoAJ5AHonNVL_jgWg7b0nWjdiwgBi66UZgq-UpHL7OHESSnjCaJz6L-kMDzcjwOfHl3MayQfz7HtPTtOayXT4uPumUuvATFF5iP614N2S0M0Bc8WKpurjcwDR4Ku_7sURA7WrmvZaf3ze4YVpBqraSre5IlRQfxyV5xBxlFww0bVVuHz7TBcmi17OvrvFWpwOkQE6MIUJQBq6Mr2gFv7OrPmAeUzcO-kcsM2HyaIYODx0IjB3Ix4TuqXEjZPeu27dADK1DnASnx3KoedVLwv9jVj_W0mikNmdnDBgHjkuhOH2ey_BhtTwmVAmMs5W_2wt7cVQAhNbJ_US6qtcSGFNkRdlUWWgw6W-rHQphwkSZ7hfAMDxeJ-RkJ6gULEfZUzaYqRM34Y6-pvUL2b01U8tkdJ_pJn6zycaYPAn_1lvz3dminoZWZv8oHA9BfqdWD4K6TZi4O1eSC8vwph8bvA-7Am-h0frNem3lPunSQCQ7bc8dEKCsXbN9ZfMVJgl3DejduD9yWM0nDgfwRbftynem6WpdbgRMtveMMuQBwk_a6Ml42CfucfOofCxQgR_sz9vW3oLeqs; _oauth2_proxy_1=LWPtAT_obdWRfW9HVnNJy9E1mI4PF8MNJ1W5ZHqMC70SUhIyN2Efx70bEfQvK4R_6CQIsujYj2XzWEy81F2UTNIibgIOu25mZgLUscu9F2UkTYoC3R-Bd-2Y9Jdb7fGk8lNzLFeOj8OVZESf2jxqcjxuE97CICUYILZVfXyreqJ1Glrb3L4zagp8DOEnbWzz03bJNhDKN_Rr9T7MBLbaIiSS96fmTeMpAUKqVQZxSpXcgavdcvvScsLtmTrJDtV07UQwq6TffSKdqJ89ce7VIjC0nSUdaiaDH8DXpEb8WNohkYLp1wsdzavSA8JSiSxwv7AKiGjqyVGnbSP3k1jzTiaBbeGakNjDqejjgCbCx7Mk1RrUcOHNaZTY4avW5UsssRr-hlatd6tmQgf8zXD3-N57UFYYtS_Wq4FfOnTrDwW2nk4wrsMB9dtDuOJO3RYYQaxiRExOJb9T3G1BhvUnnO3hkNJVT3Bz_AU2Q0-kqcb0rNPr2o3NasTcXvIBq6s1YYeUduFD8v1Cde4EDDE_jS4gwR3KAuo8HDwc_HHSm5LIl_l8BPWwr6zSlD574GTYaCK1nkJbDNs9B5FVviROcuHrEXyJ_qpPmQhRjUW5FuPMkh224unkSweqZdLLNXabI9rKUnuKMy89Ssqea-rpV-lU3zGa2i7gkWj_-P3VN9A_K3U_0-dioLw7RKbewXwFU-yGFUKXATmdUSNCmsLAc5eEP4uLuH2v5AJOGUF7A8-NCAd3zMawAJYbTQKDYlO_qM4pB-fb2SdRnqf2eLAtO2GpiUo99nNxhqRbpbL65JQVyS_sYzUfjKBvwfjVRh2c_ufZa9lxOOB0d5aBXPtdtjjYJM44Lxr-3QFwsWfd9vIXbEdzfs0LqlVpbuqFZKk4XCdaO8H7IBuVVq1B0yl473SM5uh1kz3xziObvo72dnS0TqETQzstT0wTwwjIgI_4-HhvVkQUcrjQ1_jKYrNsdpaTxqR1YveP12htfUH9rVj0VZLy5bI9PR-S2S5hnfAdHjVctvrH_G4foIxZCU4dt4j-EChMwYkS4kbxgk1-oUK9kfOccHBFJOfSeX_TdKx2X0h5RFIikko1ABonhveqmFrBfW0X_Hv89quR89CejSAWPgEF-E7GuWpGIJDvfXiV_NIK1wrC4c47PbvNN4QPa84lktspHrWHQRmNVdFCfFvnTEy69-jbQnQG0ga7eypRXaNhY3ce1zyuB-qVIqFXToRNiOjhPlQ6b0VhXATotdez1jhWXxeXBDUOiw68j4--W_VZD4KLVuVguYDnu5gaTCQQbEJLA==|1746485719|5v4PVWoBj72abMBtQVLnntRaurVy4SJniROwTnhg5o4=; _dd_s=logs=1&id=5e37b0d5-6e26-4ce7-9284-739c44c179d6&created=1746708525674&expire=1746712313300",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"company_name\": \"Test\",\n    \"participant\": \"GLN:1111111887223\",\n    \"company_type\": \"prod\",\n    \"contact\": \"testingnow@mailinaotr.com\",\n    \"website\": \"now.com\",\n    \"phonenumber\": \"09055755671\",\n    \"sites\": [\n        {\n            \"site_name\": \"Random\",\n            \"site_address\": \"Random\",\n            \"site_city\": \"Random\",\n            \"site_country\": \"nigeria\",\n            \"site_state\": \"Random\",\n            \"site_zipcode\": \"Random\",\n            \"location\": \"GLN:1111111887222\",\n            \"coordinates\": {\n                \"latitude\": \"4\",\n                \"longitude\": \"5\"\n            }\n        }\n    ],\n    \"brands\": [\n        {\n            \"brand_name\": \"Now\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demo.dfqt.org/participant-api/participant/add-participant",
							"protocol": "https",
							"host": [
								"demo",
								"dfqt",
								"org"
							],
							"path": [
								"participant-api",
								"participant",
								"add-participant"
							]
						},
						"description": "Used to add new Participant"
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"company_name\": \"<string>\",\n  \"participant\": \"<string>\",\n  \"company_type\": \"<string>\",\n  \"contact\": \"<string>\",\n  \"website\": \"<string>\",\n  \"phonenumber\": \"<string>\",\n  \"sites\": [\n    {\n      \"location\": \"<string>\",\n      \"participant\": \"<string>\",\n      \"site_address\": \"<string>\",\n      \"site_city\": \"<string>\",\n      \"site_country\": \"<string>\",\n      \"site_name\": \"<string>\",\n      \"site_state\": \"<string>\",\n      \"site_zipcode\": \"<string>\",\n      \"coordinates\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\"\n      }\n    },\n    {\n      \"location\": \"<string>\",\n      \"participant\": \"<string>\",\n      \"site_address\": \"<string>\",\n      \"site_city\": \"<string>\",\n      \"site_country\": \"<string>\",\n      \"site_name\": \"<string>\",\n      \"site_state\": \"<string>\",\n      \"site_zipcode\": \"<string>\",\n      \"coordinates\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\"\n      }\n    }\n  ],\n  \"brands\": [\n    {\n      \"brand_name\": \"<string>\"\n    },\n    {\n      \"brand_name\": \"<string>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/add-participant",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"add-participant"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		},
		{
			"name": "Get App Release",
			"item": [
				{
					"name": "Get App Release Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// ✅ Check status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"// ✅ Check success is true",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(response.success).to.eql(true);",
									"});",
									"",
									"// ✅ Ensure data is an array and not empty",
									"pm.test(\"Data array contains at least one item\", function () {",
									"    pm.expect(response.data).to.be.an(\"array\").that.is.not.empty;",
									"});",
									"",
									"// ✅ Validate the releaseVersion and release",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/get-app-release",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"get-app-release"
							]
						},
						"description": "Used to get the release version"
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/participant/get-app-release",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"get-app-release"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		},
		{
			"name": "Get Participant Brands",
			"item": [
				{
					"name": "Get Brands Aligned to Participan - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"brand_id\", response.data[0]._id)",
									"",
									"// ✅ Check status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"// ✅ success should be trueƒ",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(response.success).to.eql(true);",
									"});",
									"",
									"// ✅ data should be a non-empty array",
									"pm.test(\"Data is a non-empty array\", function () {",
									"    pm.expect(response.data).to.be.an(\"array\").that.is.not.empty;",
									"});",
									"",
									"// ✅ Each item should have _id and brand_name",
									"pm.test(\"Each item has _id and brand_name\", function () {",
									"    response.data.forEach(item => {",
									"        pm.expect(item).to.have.property(\"_id\").that.is.a(\"string\");",
									"        pm.expect(item).to.have.property(\"brand_name\").that.is.a(\"string\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participant\": {\n        \"type\": \"GLN\",\n        \"id\": \"4041865000021\"\n    }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/participant-brands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"participant-brands"
							]
						}
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"participant\": {\n    \"type\": \"<string>\",\n    \"id\": \"<string>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/participant-brands",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"participant-brands"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		},
		{
			"name": "create-brands",
			"item": [
				{
					"name": "Add new Brand for Participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// ✅ Status code check",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"// ✅ success is true",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(response.success).to.eql(true);",
									"});",
									"",
									"// ✅ data is an array (empty)",
									"pm.test(\"Data is an empty array\", function () {",
									"    pm.expect(response.data).to.be.an(\"array\").that.is.empty;",
									"});",
									"",
									"// ✅ details object has correct message",
									"pm.test(\"Details contain correct message\", function () {",
									"    pm.expect(response.details).to.have.property(\"message\", \"Brand(s) added successfully\");",
									"    pm.expect(response.details).to.have.property(\"detail\", \"\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participant\": \"GLN:4041865000021\",\n    \"brands\": [\n        {\n            \"brand_name\": \"band\"\n        },\n        {\n            \"brand_name\": \"band\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/create-brands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"create-brands"
							]
						}
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"participant\": \"<string>\",\n  \"brands\": [\n    {\n      \"brand_name\": \"<string>\"\n    },\n    {\n      \"brand_name\": \"<string>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/create-brands",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"create-brands"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		},
		{
			"name": "Delete Brands",
			"item": [
				{
					"name": "Delete Brand for Participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// ✅ Check response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"// ✅ Response success flag should be true",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"// ✅ Response data should be an array (even if empty)",
									"pm.test(\"Data is an array\", function () {",
									"    pm.expect(response.data).to.be.an(\"array\");",
									"});",
									"",
									"// ✅ Message should confirm deletion",
									"pm.test(\"Confirmation message is correct\", function () {",
									"    pm.expect(response.details.message).to.eql(\"Brand(s) deleted successfully\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participant\": \"GLN:4041865000021\",\n    \"brands\": [\n        \"{{brand_id}}\"\n    ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/delete-brands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"delete-brands"
							]
						}
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"participant\": \"<string>\",\n  \"brands\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/participant/delete-brands",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"delete-brands"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		},
		{
			"name": "Country List",
			"item": [
				{
					"name": "Get Countries List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success: true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains countries data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
									"",
									"    // Optional: check one known entry",
									"    const country = jsonData.data.find(c => c.value === \"NG\");",
									"    pm.expect(country).to.have.property(\"label\", \"Nigeria\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/participant-api/participant/country-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"participant-api",
								"participant",
								"country-list"
							]
						}
					},
					"response": [
						{
							"name": "Success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/participant/country-list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"participant",
										"country-list"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const path = pm.collectionVariables.get(\"reqPath\") || \"\";",
					"const firstSegment = path[0] // to extract first path segment",
					"console.log(\"SEGMENT>>>\", firstSegment)",
					"console.log(\"First segment of path:\", firstSegment);",
					"",
					"const clientIdMap = {",
					"    \"recording\": \"gain-connector\",",
					"    \"dashboard-api\": \"gain-reporting\",",
					"    \"user\": \"gain-user-management\",",
					"    \"ingest-api\": \"gain-reporting\"",
					"};",
					"",
					"const client_id = clientIdMap[firstSegment];",
					"if (!client_id) {",
					"    console.log(\"Unknown path segment. No refresh will be attempted.\");",
					"    return;",
					"}",
					"",
					"console.log(\"Using client_id:\", client_id);",
					"",
					"let refresh_token = pm.collectionVariables.get('refresh_token');",
					"if (!refresh_token) {",
					"    console.log(\"No refresh token available.\");",
					"    return;",
					"}",
					"",
					"pm.sendRequest({",
					"    url: \"https://demo.dfqt.org/iam/realms/gain/protocol/openid-connect/token\",",
					"    method: \"POST\",",
					"    header: {",
					"        \"Content-Type\": \"application/x-www-form-urlencoded\"",
					"    },",
					"    body: {",
					"        mode: \"urlencoded\",",
					"        urlencoded: [",
					"            { key: \"grant_type\", value: \"refresh_token\" },",
					"            { key: \"refresh_token\", value: refresh_token },",
					"            { key: \"client_id\", value: client_id }",
					"        ]",
					"    }",
					"}, function (err, response) {",
					"    if (err) {",
					"        console.log(\"Error fetching token:\", err);",
					"    } else {",
					"        let jsonResponse = response.json();",
					"        console.log(\"Token Response:\", jsonResponse);",
					"        if (jsonResponse.access_token) {",
					"            pm.collectionVariables.set(\"access_token\", jsonResponse.access_token);",
					"            pm.collectionVariables.set(\"refresh_token\", jsonResponse.refresh_token);",
					"        }",
					"    }",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/"
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "reqUrl",
			"value": ""
		},
		{
			"key": "participant_id",
			"value": ""
		},
		{
			"key": "participant_type",
			"value": ""
		},
		{
			"key": "brand_id",
			"value": ""
		}
	]
}